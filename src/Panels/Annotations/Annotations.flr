movie 'G:\Trevor\Extensions\Fireworks\Annotations\source\Annotations.swf' {
// flash 6, total frames: 1, frame rate: 24 fps, 210x150 px, compressed

  movieClip 2 fcb_hitArea {
  }

  movieClip 4  {
  }

  movieClip 6  {
  }

  movieClip 8  {
  }

  movieClip 10  {
  }

  movieClip 11  {

    frame 1 {
      var component = _parent._parent;
      component.registerSkinElement(shadow_mc, 'shadow');
      component.registerSkinElement(darkshadow_mc, 'darkshadow');
      component.registerSkinElement(highlight_mc, 'highlight');
      component.registerSkinElement(highlight3D_mc, 'highlight3D');
    }
  }

  movieClip 13  {
  }

  movieClip 14  {

    frame 1 {
      var component = _parent._parent;
      component.registerSkinElement(background_mc, 'background');
    }
  }

  movieClip 16  {
  }

  movieClip 17  {

    frame 1 {
      var component = _parent._parent;
      component.registerSkinElement(background_mc, 'backgroundDisabled');
    }
  }

  movieClip 18  {
  }

  movieClip 19  {

    frame 1 {
      var component = _parent._parent;
      component.registerSkinElement(background_mc, 'backgroundDisabled');
    }
  }

  movieClip 21  {
  }

  movieClip 22  {

    frame 1 {
      var component = _parent._parent;
      component.registerSkinElement(check_mc, 'foregroundDisabled');
    }
  }

  movieClip 24  {
  }

  movieClip 25  {

    frame 1 {
      var component = _parent._parent;
      component.registerSkinElement(check_mc, 'check');
    }
  }

  movieClip 26 fcb_states {

    frame 1 {
      stop();
    }

    frame 2 {
      stop();
    }

    frame 3 {
      stop();
    }

    frame 4 {
      stop();
    }

    frame 5 {
      stop();
    }

    frame 6 {
      stop();
    }
  }

  movieClip 29 FLabelSymbol {

    #initclip
      _global.FLabelClass = function () {
        if (this.hostComponent == undefined) {
          this.hostComponent = (this._parent.controller == undefined) ? this._parent : this._parent.controller;
        }
        if (this.customTextStyle == undefined) {
          if (this.hostComponent.textStyle == undefined) {
            this.hostComponent.textStyle = new TextFormat();
          }
          this.textStyle = this.hostComponent.textStyle;
          this.enable = true;
        }
      };

      FLabelClass.prototype = new MovieClip();
      Object.registerClass('FLabelSymbol', FLabelClass);
      FLabelClass.prototype.setLabel = function (label) {
        var val = this.hostComponent.styleTable.embedFonts.value;
        if (val != undefined) {
          this.labelField.embedFonts = val;
        }
        this.labelField.setNewTextFormat(this.textStyle);
        this.labelField.text = label;
        this.labelField._height = this.labelField.textHeight + 2;
      };

      FLabelClass.prototype.setSize = function (width) {
        this.labelField._width = width;
      };

      FLabelClass.prototype.setEnabled = function (enable) {
        this.enable = enable;
        var tmpColor = this.hostComponent.styleTable[enable ? 'textColor' : 'textDisabled'].value;
        if (tmpColor == undefined) {
          tmpColor = enable ? 0 : 8947848;
        }
        this.setColor(tmpColor);
      };

      FLabelClass.prototype.getLabel = function () {
        return this.labelField.text;
      };

      FLabelClass.prototype.setColor = function (col) {
        this.labelField.textColor = col;
      };

    #endinitclip

    frame 1 {
    }
  }

  movieClip 30 FUIComponentSymbol {

    #initclip
      function FUIComponentClass() {
        this.init();
      }

      FUIComponentClass.prototype = new MovieClip();
      FUIComponentClass.prototype.init = function () {
        this.enable = true;
        this.focused = false;
        this.useHandCursor = false;
        this._accImpl = new Object();
        this._accImpl.stub = true;
        this.styleTable = new Array();
        if (_global.globalStyleFormat == undefined) {
          _global.globalStyleFormat = new FStyleFormat();
          globalStyleFormat.isGlobal = true;
          _global._focusControl = new Object();
          _global._focusControl.onSetFocus = function (oldFocus, newFocus) {
            oldFocus.myOnKillFocus();
            newFocus.myOnSetFocus();
          };

          Selection.addListener(_global._focusControl);
        }
        if (this._name != undefined) {
          this._focusrect = false;
          this.tabEnabled = true;
          this.focusEnabled = true;
          this.tabChildren = false;
          this.tabFocused = true;
          if (this.hostStyle == undefined) {
            globalStyleFormat.addListener(this);
          } else {
            this.styleTable = this.hostStyle;
          }
          this.deadPreview._visible = false;
          this.deadPreview._height = 1;
          this.deadPreview._width = 1;
          this.methodTable = new Object();
          this.keyListener = new Object();
          this.keyListener.controller = this;
          this.keyListener.onKeyDown = function () {
            this.controller.myOnKeyDown();
          };

          this.keyListener.onKeyUp = function () {
            this.controller.myOnKeyUp();
          };

          for (var i in this.styleFormat_prm) {
            this.setStyleProperty(i, this.styleFormat_prm[i]);
          }
        }
      };

      FUIComponentClass.prototype.setEnabled = function (enabledFlag) {
        this.enable = arguments.length > 0 ? enabledFlag : true;
        this.focusEnabled = enabledFlag;
        this.tabEnabled = this.focusEnabled;
        if (!this.enable && this.focused) {
          Selection.setFocus(undefined);
        }
      };

      FUIComponentClass.prototype.getEnabled = function () {
        return this.enable;
      };

      FUIComponentClass.prototype.setSize = function (w, h) {
        this.width = w;
        this.height = h;
        this.focusRect.removeMovieClip();
      };

      FUIComponentClass.prototype.setChangeHandler = function (chng, obj) {
        this.handlerObj = (obj == undefined) ? this._parent : obj;
        this.changeHandler = chng;
      };

      FUIComponentClass.prototype.invalidate = function (methodName) {
        this.methodTable[methodName] = true;
        this.onEnterFrame = this.cleanUI;
      };

      FUIComponentClass.prototype.cleanUI = function () {
        if (this.methodTable.setSize) {
          this.setSize(this.width, this.height);
        } else {
          this.cleanUINotSize();
        }
        this.methodTable = new Object();
        delete this.onEnterFrame;
      };

      FUIComponentClass.prototype.cleanUINotSize = function () {
        for (var funct in this.methodTable) {
          this[funct]();
        }
      };

      FUIComponentClass.prototype.drawRect = function (x, y, w, h) {
        var inner = this.styleTable.focusRectInner.value;
        var outer = this.styleTable.focusRectOuter.value;
        if (inner == undefined) {
          inner = 16777215;
        }
        if (outer == undefined) {
          outer = 0;
        }
        this.createEmptyMovieClip('focusRect', 1000);
        this.focusRect.controller = this;
        this.focusRect.lineStyle(1, outer);
        this.focusRect.moveTo(x, y);
        this.focusRect.lineTo(x + w, y);
        this.focusRect.lineTo(x + w, y + h);
        this.focusRect.lineTo(x, y + h);
        this.focusRect.lineTo(x, y);
        this.focusRect.lineStyle(1, inner);
        this.focusRect.moveTo(x + 1, y + 1);
        this.focusRect.lineTo(x + w - 1, y + 1);
        this.focusRect.lineTo(x + w - 1, y + h - 1);
        this.focusRect.lineTo(x + 1, y + h - 1);
        this.focusRect.lineTo(x + 1, y + 1);
      };

      FUIComponentClass.prototype.pressFocus = function () {
        this.tabFocused = false;
        this.focusRect.removeMovieClip();
        Selection.setFocus(this);
      };

      FUIComponentClass.prototype.drawFocusRect = function () {
        this.drawRect(-2, -2, this.width + 4, this.height + 4);
      };

      FUIComponentClass.prototype.myOnSetFocus = function () {
        this.focused = true;
        Key.addListener(this.keyListener);
        if (this.tabFocused) {
          this.drawFocusRect();
        }
      };

      FUIComponentClass.prototype.myOnKillFocus = function () {
        this.tabFocused = true;
        this.focused = false;
        this.focusRect.removeMovieClip();
        Key.removeListener(this.keyListener);
      };

      FUIComponentClass.prototype.executeCallBack = function () {
        this.handlerObj[this.changeHandler](this);
      };

      FUIComponentClass.prototype.updateStyleProperty = function (styleFormat, propName) {
        this.setStyleProperty(propName, styleFormat[propName], styleFormat.isGlobal);
      };

      FUIComponentClass.prototype.setStyleProperty = function (propName, value, isGlobal) {
        if (value == '') {
          return undefined;
        }
        var tmpValue = parseInt(value);
        if (!isNaN(tmpValue)) {
          value = tmpValue;
        }
        var global = arguments.length > 2 ? isGlobal : false;
        if (this.styleTable[propName] == undefined) {
          this.styleTable[propName] = new Object();
          this.styleTable[propName].useGlobal = true;
        }
        if (this.styleTable[propName].useGlobal || !global) {
          this.styleTable[propName].value = value;
          if (this.setCustomStyleProperty(propName, value)) {
          } else {
            if (propName == 'embedFonts') {
              this.invalidate('setSize');
            } else {
              if (propName.subString(0, 4) == 'text') {
                if (this.textStyle == undefined) {
                  this.textStyle = new TextFormat();
                }
                var textProp = propName.subString(4, propName.length);
                this.textStyle[textProp] = value;
                this.invalidate('setSize');
              } else {
                for (var j in this.styleTable[propName].coloredMCs) {
                  var myColor = new Color(this.styleTable[propName].coloredMCs[j]);
                  if (this.styleTable[propName].value == undefined) {
                    var myTObj = {'ra': '100', 'rb': '0', 'ga': '100', 'gb': '0', 'ba': '100', 'bb': '0', 'aa': '100', 'ab': '0'};
                    myColor.setTransform(myTObj);
                  } else {
                    myColor.setRGB(value);
                  }
                }
              }
            }
          }
          this.styleTable[propName].useGlobal = global;
        }
      };

      FUIComponentClass.prototype.registerSkinElement = function (skinMCRef, propName) {
        if (this.styleTable[propName] == undefined) {
          this.styleTable[propName] = new Object();
          this.styleTable[propName].useGlobal = true;
        }
        if (this.styleTable[propName].coloredMCs == undefined) {
          this.styleTable[propName].coloredMCs = new Object();
        }
        this.styleTable[propName].coloredMCs[skinMCRef] = skinMCRef;
        if (this.styleTable[propName].value != undefined) {
          var myColor = new Color(skinMCRef);
          myColor.setRGB(this.styleTable[propName].value);
        }
      };

      _global.FStyleFormat = function () {
        this.nonStyles = {'listeners': true, 'isGlobal': true, 'isAStyle': true, 'addListener': true, 'removeListener': true, 'nonStyles': true, 'applyChanges': true};
        this.listeners = new Object();
        this.isGlobal = false;
        if (arguments.length > 0) {
          for (var i in arguments[0]) {
            this[i] = arguments[0][i];
          }
        }
      };

      _global.FStyleFormat.prototype = new Object();
      FStyleFormat.prototype.addListener = function () {
        var arg = 0;
        while (arg < arguments.length) {
          var mcRef = arguments[arg];
          this.listeners[arguments[arg]] = mcRef;
          for (var i in this) {
            if (this.isAStyle(i)) {
              mcRef.updateStyleProperty(this, i.toString());
            }
          }
          ++arg;
        }
      };

      FStyleFormat.prototype.removeListener = function (component) {
        this.listeners[component] = undefined;
        for (var prop in this) {
          if (this.isAStyle(prop)) {
            if (component.styleTable[prop].useGlobal == this.isGlobal) {
              component.styleTable[prop].useGlobal = true;
              var value = this.isGlobal ? undefined : globalStyleFormat[prop];
              component.setStyleProperty(prop, value, true);
            }
          }
        }
      };

      FStyleFormat.prototype.applyChanges = function () {
        var count = 0;
        for (var i in this.listeners) {
          var component = this.listeners[i];
          if (arguments.length > 0) {
            var j = 0;
            while (j < arguments.length) {
              if (this.isAStyle(arguments[j])) {
                component.updateStyleProperty(this, arguments[j]);
              }
              ++j;
            }
          } else {
            for (var j in this) {
              if (this.isAStyle(j)) {
                component.updateStyleProperty(this, j.toString());
              }
            }
          }
        }
      };

      FStyleFormat.prototype.isAStyle = function (name) {
        return this.nonStyles[name] ? false : true;
      };

    #endinitclip

    frame 1 {
    }
  }

  movieClip 32  {
  }

  movieClip 34  {
  }

  movieClip 35  {
  }

  movieClip 36  {
  }

  movieClip 37  {
  }

  movieClip 38  {
  }

  movieClip 39  {

    frame 1 {
      var component = _parent._parent;
      component.registerSkinElement(arrow_mc, 'arrow');
      component.registerSkinElement(face_mc, 'face');
      component.registerSkinElement(shadow_mc, 'shadow');
      component.registerSkinElement(darkshadow_mc, 'darkshadow');
      component.registerSkinElement(highlight_mc, 'highlight');
      component.registerSkinElement(highlight3D_mc, 'highlight3D');
    }
  }

  movieClip 40  {
  }

  movieClip 41  {
  }

  movieClip 42  {
  }

  movieClip 43  {
  }

  movieClip 45  {
  }

  movieClip 47  {
  }

  movieClip 48  {

    frame 1 {
      var component = _parent._parent;
      component.registerSkinElement(arrow_mc, 'arrow');
      component.registerSkinElement(face_mc, 'face');
      component.registerSkinElement(shadow_mc, 'shadow');
      component.registerSkinElement(darkshadow_mc, 'darkshadow');
      component.registerSkinElement(highlight_mc, 'highlight');
      component.registerSkinElement(highlight3D_mc, 'highlight3D');
    }
  }

  movieClip 49  {
  }

  movieClip 50  {
  }

  movieClip 52  {
  }

  movieClip 54  {
  }

  movieClip 56  {
  }

  movieClip 58  {
  }

  movieClip 59  {

    frame 1 {
      var component = _parent._parent;
      component.registerSkinElement(arrow_mc, 'foregroundDisabled');
      component.registerSkinElement(face_mc, 'face');
      component.registerSkinElement(shadow_mc, 'shadow');
      component.registerSkinElement(darkshadow_mc, 'darkshadow');
      component.registerSkinElement(highlight_mc, 'highlight');
      component.registerSkinElement(highlight3D_mc, 'highlight3D');
    }
  }

  movieClip 60 UpArrow {

    frame 1 {
      stop();
    }

    frame 2 {
      stop();
    }

    frame 3 {
      stop();
    }
  }

  movieClip 62  {
  }

  movieClip 64  {
  }

  movieClip 66  {
  }

  movieClip 67  {
  }

  movieClip 68  {

    frame 1 {
      var component = _parent._parent;
      component.registerSkinElement(shadow_mc, 'shadow');
      component.registerSkinElement(darkshadow_mc, 'darkshadow');
      component.registerSkinElement(highlight_mc, 'highlight');
      component.registerSkinElement(highlight3D_mc, 'highlight3D');
    }
  }

  movieClip 69  {
  }

  movieClip 70  {
  }

  movieClip 72  {
  }

  movieClip 73  {
  }

  movieClip 74  {
  }

  movieClip 75  {

    frame 1 {
      var component = _parent._parent;
      component.registerSkinElement(face_mc, 'face');
      component.registerSkinElement(shadow_mc, 'shadow');
      component.registerSkinElement(darkshadow_mc, 'darkshadow');
      component.registerSkinElement(highlight_mc, 'highlight');
      component.registerSkinElement(highlight3D_mc, 'highlight3D');
    }
  }

  movieClip 76  {
  }

  movieClip 78  {
  }

  movieClip 79  {
  }

  movieClip 80  {

    frame 1 {
      var component = _parent._parent;
      component.registerSkinElement(highlight3D_mc, 'highlight3D');
      component.registerSkinElement(shadow_mc, 'shadow');
      component.registerSkinElement(darkshadow_mc, 'darkshadow');
      component.registerSkinElement(highlight_mc, 'highlight');
    }
  }

  movieClip 81 ScrollThumb {

    frame 1 {
      stop();
    }
  }

  movieClip 82  {
  }

  movieClip 84  {
  }

  movieClip 85  {
  }

  movieClip 86  {
  }

  movieClip 87  {
  }

  movieClip 88  {
  }

  movieClip 89  {

    frame 1 {
      var component = _parent._parent;
      component.registerSkinElement(arrow_mc, 'arrow');
      component.registerSkinElement(face_mc, 'face');
      component.registerSkinElement(shadow_mc, 'shadow');
      component.registerSkinElement(darkshadow_mc, 'darkshadow');
      component.registerSkinElement(highlight_mc, 'highlight');
      component.registerSkinElement(highlight3D_mc, 'highlight3D');
    }
  }

  movieClip 90  {
  }

  movieClip 91  {
  }

  movieClip 92  {
  }

  movieClip 93  {
  }

  movieClip 94  {
  }

  movieClip 96  {
  }

  movieClip 97  {

    frame 1 {
      var component = _parent._parent;
      component.registerSkinElement(arrow_mc, 'arrow');
      component.registerSkinElement(face_mc, 'face');
      component.registerSkinElement(shadow_mc, 'shadow');
      component.registerSkinElement(darkshadow_mc, 'darkshadow');
      component.registerSkinElement(highlight_mc, 'highlight');
      component.registerSkinElement(highlight3D_mc, 'highlight3D');
    }
  }

  movieClip 98  {
  }

  movieClip 99  {
  }

  movieClip 100  {
  }

  movieClip 101  {
  }

  movieClip 102  {
  }

  movieClip 104  {
  }

  movieClip 105  {

    frame 1 {
      var component = _parent._parent;
      component.registerSkinElement(arrow_mc, 'foregroundDisabled');
      component.registerSkinElement(face_mc, 'face');
      component.registerSkinElement(shadow_mc, 'shadow');
      component.registerSkinElement(darkshadow_mc, 'darkshadow');
      component.registerSkinElement(highlight_mc, 'highlight');
      component.registerSkinElement(highlight3D_mc, 'highlight3D');
    }
  }

  movieClip 106 DownArrow {

    frame 1 {
      stop();
    }

    frame 2 {
      stop();
    }

    frame 3 {
      stop();
    }
  }

  movieClip 107  {
  }

  movieClip 109 FBoundingBoxSymbol {

    frame 1 {
      var component = _parent;
      component.registerSkinElement(boundingBox, 'background');
      stop();
    }

    frame 2 {
      component.registerSkinElement(boundingBox2, 'backgroundDisabled');
      stop();
    }
  }

  movieClip 111  {
  }

  movieClip 112 FCheckBoxSymbol {

    #initclip
      function FCheckBoxClass() {
        this.init();
      }

      FCheckBoxClass.prototype = new FUIComponentClass();
      Object.registerClass('FCheckBoxSymbol', FCheckBoxClass);
      FCheckBoxClass.prototype.init = function () {
        super.setSize(this._width, this._height);
        this.boundingBox_mc.unloadMovie();
        this.attachMovie('fcb_hitArea', 'fcb_hitArea_mc', 1);
        this.attachMovie('fcb_states', 'fcb_states_mc', 2);
        this.attachMovie('FLabelSymbol', 'fLabel_mc', 3);
        super.init();
        this.setChangeHandler(this.changeHandler);
        this._xscale = 100;
        this._yscale = 100;
        this.setSize(this.width, this.height);
        if (this.initialValue == undefined) {
          this.setCheckState(false);
        } else {
          this.setCheckState(this.initialValue);
        }
        if (this.label != undefined) {
          this.setLabel(this.label);
        }
        this.ROLE_SYSTEM_CHECKBUTTON = 44;
        this.STATE_SYSTEM_CHECKED = 16;
        this.EVENT_OBJECT_STATECHANGE = 32778;
        this.EVENT_OBJECT_NAMECHANGE = 32780;
        this._accImpl.master = this;
        this._accImpl.stub = false;
        this._accImpl.get_accRole = this.get_accRole;
        this._accImpl.get_accName = this.get_accName;
        this._accImpl.get_accState = this.get_accState;
        this._accImpl.get_accDefaultAction = this.get_accDefaultAction;
        this._accImpl.accDoDefaultAction = this.accDoDefaultAction;
      };

      FCheckBoxClass.prototype.setLabelPlacement = function (pos) {
        this.setLabel(this.getLabel());
        this.txtFormat(pos);
        var halfLabelH = this.fLabel_mc._height / 2;
        var halfFrameH = this.fcb_states_mc._height / 2;
        var vertCenter = halfFrameH - halfLabelH;
        var checkWidth = this.fcb_states_mc._width;
        var frame = this.fcb_states_mc;
        var label = this.fLabel_mc;
        var w = 0;
        if (frame._width > this.width) {
          w = 0;
        } else {
          w = this.width - frame._width;
        }
        this.fLabel_mc.setSize(w);
        if (pos == 'right' || pos == undefined) {
          this.labelPlacement = 'right';
          this.fcb_states_mc._x = 0;
          this.fLabel_mc._x = checkWidth;
          this.txtFormat('left');
        } else {
          if (pos == 'left') {
            this.labelPlacement = 'left';
            this.fLabel_mc._x = 0;
            this.fcb_states_mc._x = this.width - checkWidth;
            this.txtFormat('right');
          }
        }
        this.fLabel_mc._y = vertCenter;
        this.fcb_hitArea_mc._y = vertCenter;
      };

      FCheckBoxClass.prototype.txtFormat = function (pos) {
        var txtS = this.textStyle;
        var sTbl = this.styleTable;
        txtS.align = (sTbl.textAlign.value == undefined) ? txtS.align : undefined;
        txtS.leftMargin = (sTbl.textLeftMargin.value == undefined) ? 0 : undefined;
        txtS.rightMargin = (sTbl.textRightMargin.value == undefined) ? 0 : undefined;
        if (this.flabel_mc._height > this.height) {
          super.setSize(this.width, this.flabel_mc._height);
        } else {
          super.setSize(this.width, this.height);
        }
        this.fLabel_mc.labelField.setTextFormat(this.textStyle);
        this.setEnabled(this.enable);
      };

      FCheckBoxClass.prototype.setHitArea = function (w, h) {
        var hit = this.fcb_hitArea_mc;
        this.hitArea = hit;
        if (this.fcb_states_mc._width > w) {
          hit._width = this.fcb_states_mc._width;
        } else {
          hit._width = w;
        }
        hit._visible = false;
        if (arguments.length > 1) {
          hit._height = h;
        }
      };

      FCheckBoxClass.prototype.setSize = function (w) {
        this.setLabel(this.getLabel());
        this.setLabelPlacement(this.labelPlacement);
        if (this.fcb_states_mc._height < this.flabel_mc.labelField._height) {
          super.setSize(w, this.flabel_mc.labelField._height);
        }
        this.setHitArea(this.width, this.height);
        this.setLabelPlacement(this.labelPlacement);
      };

      FCheckBoxClass.prototype.drawFocusRect = function () {
        this.drawRect(-2, -2, this._width + 6, this._height - 1);
      };

      FCheckBoxClass.prototype.onPress = function () {
        this.pressFocus();
        _root.focusRect.removeMovieClip();
        var states = this.fcb_states_mc;
        if (this.getValue()) {
          states.gotoAndStop('checkedPress');
        } else {
          states.gotoAndStop('press');
        }
      };

      FCheckBoxClass.prototype.onRelease = function () {
        this.fcb_states_mc.gotoAndStop('up');
        this.setValue(!this.checked);
      };

      FCheckBoxClass.prototype.onReleaseOutside = function () {
        var states = this.fcb_states_mc;
        if (this.getValue()) {
          states.gotoAndStop('checkedEnabled');
        } else {
          states.gotoAndStop('up');
        }
      };

      FCheckBoxClass.prototype.onDragOut = function () {
        var states = this.fcb_states_mc;
        if (this.getValue()) {
          states.gotoAndStop('checkedEnabled');
        } else {
          states.gotoAndStop('up');
        }
      };

      FCheckBoxClass.prototype.onDragOver = function () {
        var states = this.fcb_states_mc;
        if (this.getValue()) {
          states.gotoAndStop('checkedPress');
        } else {
          states.gotoAndStop('press');
        }
      };

      FCheckBoxClass.prototype.setValue = function (checkedValue) {
        if (checkedValue || checkedValue == undefined) {
          this.setCheckState(checkedValue);
        } else {
          if (checkedValue == false) {
            this.setCheckState(checkedValue);
          }
        }
        this.executeCallBack();
        if (Accessibility.isActive()) {
          Accessibility.sendEvent(this, 0, this.EVENT_OBJECT_STATECHANGE, true);
        }
      };

      FCheckBoxClass.prototype.setCheckState = function (checkedValue) {
        var states = this.fcb_states_mc;
        if (this.enable) {
          this.flabel_mc.setEnabled(true);
          if (checkedValue || checkedValue == undefined) {
            states.gotoAndStop('checkedEnabled');
            this.enabled = true;
            this.checked = true;
          } else {
            states.gotoAndStop('up');
            this.enabled = true;
            this.checked = false;
          }
        } else {
          this.flabel_mc.setEnabled(false);
          if (checkedValue || checkedValue == undefined) {
            states.gotoAndStop('checkedDisabled');
            this.enabled = false;
            this.checked = true;
          } else {
            states.gotoAndStop('uncheckedDisabled');
            this.enabled = false;
            this.checked = false;
            this.focusRect.removeMovieClip();
          }
        }
      };

      FCheckBoxClass.prototype.getValue = function () {
        return this.checked;
      };

      FCheckBoxClass.prototype.setEnabled = function (enable) {
        if (enable == true || enable == undefined) {
          this.enable = true;
          Super.setEnabled(true);
        } else {
          this.enable = false;
          Super.setEnabled(false);
        }
        this.setCheckState(this.checked);
      };

      FCheckBoxClass.prototype.getEnabled = function () {
        return this.enable;
      };

      FCheckBoxClass.prototype.setLabel = function (label) {
        this.fLabel_mc.setLabel(label);
        this.txtFormat();
        if (Accessibility.isActive()) {
          Accessibility.sendEvent(this, 0, this.EVENT_OBJECT_NAMECHANGE);
        }
      };

      FCheckBoxClass.prototype.getLabel = function () {
        return this.fLabel_mc.labelField.text;
      };

      FCheckBoxClass.prototype.setTextColor = function (color) {
        this.fLabel_mc.labelField.textColor = color;
      };

      FCheckBoxClass.prototype.myOnKeyDown = function () {
        if (Key.getCode() == 32 && this.pressOnce == undefined && this.enabled == true) {
          this.setValue(!this.getValue());
          this.pressOnce = true;
        }
      };

      FCheckBoxClass.prototype.myOnKeyUp = function () {
        if (Key.getCode() == 32) {
          this.pressOnce = undefined;
        }
      };

      FCheckBoxClass.prototype.get_accRole = function (childId) {
        return this.master.ROLE_SYSTEM_CHECKBUTTON;
      };

      FCheckBoxClass.prototype.get_accName = function (childId) {
        return this.master.getLabel();
      };

      FCheckBoxClass.prototype.get_accState = function (childId) {
        if (this.master.getValue()) {
          return this.master.STATE_SYSTEM_CHECKED;
        } else {
          return 0;
        }
      };

      FCheckBoxClass.prototype.get_accDefaultAction = function (childId) {
        if (this.master.getValue()) {
          return 'UnCheck';
        } else {
          return 'Check';
        }
      };

      FCheckBoxClass.prototype.accDoDefaultAction = function (childId) {
        this.master.setValue(!this.master.getValue());
      };

    #endinitclip

    frame 1 {
      boundingBox_mc._visible = false;
      deadPreview._visible = false;
    }
  }

  movieClip 139  {

    frame 1 {
      stop();
    }
  }

  movieClip 141 element {
  }

  movieClip 143  {
  }

  movieClip 144  {

    frame 1 {
      var component = _parent;
      component.registerSkinElement(track_mc, 'scrollTrack');
    }
  }

  movieClip 145 FScrollBarSymbol {

    #initclip
      FScrollBarClass = function () {
        if (this._height == 4) {
          return undefined;
        }
        this.init();
        this.largeScroll = 0;
        this.pageSize = 0;
        this.maxPos = 0;
        this.minPos = 0;
        this.smallScroll = 1;
        this.width = this.horizontal ? this._width : this._height;
        this._yscale = 100;
        this._xscale = 100;
        this.setScrollPosition(0);
        this.tabEnabled = false;
        if (this._targetInstanceName.length > 0) {
          this.setScrollTarget(this._parent[this._targetInstanceName]);
        }
        this.tabChildren = false;
        this.setSize(this.width);
      };

      FScrollBarClass.prototype = new FUIComponentClass();
      FScrollBarClass.prototype.setHorizontal = function (flag) {
        if (this.horizontal && !flag) {
          this._xscale = 100;
          this._rotation = 0;
        } else {
          if (flag && !this.horizontal) {
            this._xscale = -100;
            this._rotation = -90;
          }
        }
        this.horizontal = flag;
      };

      FScrollBarClass.prototype.setScrollProperties = function (pSize, mnPos, mxPos) {
        if (!this.enable) {
          return undefined;
        }
        this.pageSize = pSize;
        this.minPos = Math.max(mnPos, 0);
        this.maxPos = Math.max(mxPos, 0);
        this.scrollPosition = Math.max(this.minPos, this.scrollPosition);
        this.scrollPosition = Math.min(this.maxPos, this.scrollPosition);
        if (this.maxPos - this.minPos <= 0) {
          this.scrollThumb_mc.removeMovieClip();
          this.upArrow_mc.gotoAndStop(3);
          this.downArrow_mc.gotoAndStop(3);
          this.downArrow_mc.onDragOut = null;
          this.downArrow_mc.onRelease = this.downArrow_mc.onDragOut;
          this.downArrow_mc.onPress = this.downArrow_mc.onDragOut;
          this.upArrow_mc.onDragOut = null;
          this.upArrow_mc.onRelease = this.upArrow_mc.onDragOut;
          this.upArrow_mc.onPress = this.upArrow_mc.onDragOut;
          this.scrollTrack_mc.onRelease = null;
          this.scrollTrack_mc.onPress = this.scrollTrack_mc.onRelease;
          this.scrollTrack_mc.onRollOut = null;
          this.scrollTrack_mc.onDragOut = this.scrollTrack_mc.onRollOut;
          this.scrollTrack_mc.useHandCursor = false;
        } else {
          var tmp = this.getScrollPosition();
          this.upArrow_mc.gotoAndStop(1);
          this.downArrow_mc.gotoAndStop(1);
          this.upArrow_mc.onDragOver = this.startUpScroller;
          this.upArrow_mc.onPress = this.upArrow_mc.onDragOver;
          this.upArrow_mc.onDragOut = this.stopScrolling;
          this.upArrow_mc.onRelease = this.upArrow_mc.onDragOut;
          this.downArrow_mc.onDragOver = this.startDownScroller;
          this.downArrow_mc.onPress = this.downArrow_mc.onDragOver;
          this.downArrow_mc.onDragOut = this.stopScrolling;
          this.downArrow_mc.onRelease = this.downArrow_mc.onDragOut;
          this.scrollTrack_mc.onDragOver = this.startTrackScroller;
          this.scrollTrack_mc.onPress = this.scrollTrack_mc.onDragOver;
          this.scrollTrack_mc.onRelease = this.stopScrolling;
          this.scrollTrack_mc.onDragOut = this.stopScrolling;
          this.scrollTrack_mc.onRollOut = this.stopScrolling;
          this.scrollTrack_mc.useHandCursor = false;
          this.attachMovie('ScrollThumb', 'scrollThumb_mc', 3);
          this.scrollThumb_mc._x = 0;
          this.scrollThumb_mc._y = this.upArrow_mc._height;
          this.scrollThumb_mc.onPress = this.startDragThumb;
          this.scrollThumb_mc.controller = this;
          this.scrollThumb_mc.onReleaseOutside = this.stopDragThumb;
          this.scrollThumb_mc.onRelease = this.scrollThumb_mc.onReleaseOutside;
          this.scrollThumb_mc.useHandCursor = false;
          this.thumbHeight = (this.pageSize / (this.maxPos - this.minPos + this.pageSize)) * this.trackSize;
          this.thumbMid_mc = this.scrollThumb_mc.mc_sliderMid;
          this.thumbTop_mc = this.scrollThumb_mc.mc_sliderTop;
          this.thumbBot_mc = this.scrollThumb_mc.mc_sliderBot;
          this.thumbHeight = Math.max(this.thumbHeight, 6);
          this.midHeight = this.thumbHeight - this.thumbTop_mc._height - this.thumbBot_mc._height;
          this.thumbMid_mc._yScale = this.midHeight * 100 / this.thumbMid_mc._height;
          this.thumbMid_mc._y = this.thumbTop_mc._height;
          this.thumbBot_mc._y = this.thumbTop_mc._height + this.midHeight;
          this.scrollTop = this.scrollThumb_mc._y;
          this.trackHeight = this.trackSize - this.thumbHeight;
          this.scrollBot = this.trackHeight + this.scrollTop;
          tmp = Math.min(tmp, this.maxPos);
          this.setScrollPosition(Math.max(tmp, this.minPos));
        }
      };

      FScrollBarClass.prototype.getScrollPosition = function () {
        return this.scrollPosition;
      };

      FScrollBarClass.prototype.setScrollPosition = function (pos) {
        this.scrollPosition = pos;
        if (this.scrollThumb_mc != undefined) {
          pos = Math.min(pos, this.maxPos);
          pos = Math.max(pos, this.minPos);
        }
        this.scrollThumb_mc._y = (pos - this.minPos) * this.trackHeight / (this.maxPos - this.minPos) + this.scrollTop;
        this.executeCallBack();
      };

      FScrollBarClass.prototype.setLargeScroll = function (lScroll) {
        this.largeScroll = lScroll;
      };

      FScrollBarClass.prototype.setSmallScroll = function (sScroll) {
        this.smallScroll = sScroll;
      };

      FScrollBarClass.prototype.setEnabled = function (enabledFlag) {
        var wasEnabled = this.enable;
        if (enabledFlag && !wasEnabled) {
          this.enable = enabledFlag;
          if (this.textField != undefined) {
            this.setScrollTarget(this.textField);
          } else {
            this.setScrollProperties(this.pageSize, this.cachedMinPos, this.cachedMaxPos);
            this.setScrollPosition(this.cachedPos);
          }
          this.clickFilter = undefined;
        } else {
          if (!enabledFlag && wasEnabled) {
            this.textField.removeListener(this);
            this.cachedPos = this.getScrollPosition();
            this.cachedMinPos = this.minPos;
            this.cachedMaxPos = this.maxPos;
            if (this.clickFilter == undefined) {
              this.setScrollProperties(this.pageSize, 0, 0);
            } else {
              this.clickFilter = true;
            }
            this.enable = enabledFlag;
          }
        }
      };

      FScrollBarClass.prototype.setSize = function (hgt) {
        if (this._height == 1) {
          return undefined;
        }
        this.width = hgt;
        this.scrollTrack_mc._yscale = 100;
        this.scrollTrack_mc._yscale = 100 * this.width / this.scrollTrack_mc._height;
        if (this.upArrow_mc == undefined) {
          this.attachMovie('UpArrow', 'upArrow_mc', 1);
          this.attachMovie('DownArrow', 'downArrow_mc', 2);
          this.upArrow_mc.controller = this;
          this.downArrow_mc.controller = this.upArrow_mc.controller;
          this.downArrow_mc.useHandCursor = false;
          this.upArrow_mc.useHandCursor = this.downArrow_mc.useHandCursor;
          this.upArrow_mc._y = 0;
          this.upArrow_mc._x = 0;
          this.downArrow_mc._x = 0;
        }
        this.scrollTrack_mc.controller = this;
        this.downArrow_mc._y = this.width - this.downArrow_mc._height;
        this.trackSize = this.width - 2 * this.downArrow_mc._height;
        if (this.textField != undefined) {
          this.onTextChanged();
        } else {
          this.setScrollProperties(this.pageSize, this.minPos, this.maxPos);
        }
      };

      FScrollBarClass.prototype.scrollIt = function (inc, mode) {
        var delt = this.smallScroll;
        if (inc != 'one') {
          delt = (this.largeScroll == 0) ? this.pageSize : this.largeScroll;
        }
        var newPos = this.getScrollPosition() + mode * delt;
        if (newPos > this.maxPos) {
          newPos = this.maxPos;
        } else {
          if (newPos < this.minPos) {
            newPos = this.minPos;
          }
        }
        this.setScrollPosition(newPos);
      };

      FScrollBarClass.prototype.startDragThumb = function () {
        this.lastY = this._ymouse;
        this.onMouseMove = this.controller.dragThumb;
      };

      FScrollBarClass.prototype.dragThumb = function () {
        this.scrollMove = this._ymouse - this.lastY;
        this.scrollMove += this._y;
        if (this.scrollMove < this.controller.scrollTop) {
          this.scrollMove = this.controller.scrollTop;
        } else {
          if (this.scrollMove > this.controller.scrollBot) {
            this.scrollMove = this.controller.scrollBot;
          }
        }
        this._y = this.scrollMove;
        var c = this.controller;
        c.scrollPosition = Math.round((c.maxPos - c.minPos) * (this._y - c.scrollTop) / c.trackHeight) + c.minPos;
        this.controller.isScrolling = true;
        updateAfterEvent();
        this.controller.executeCallBack();
      };

      FScrollBarClass.prototype.stopDragThumb = function () {
        this.controller.isScrolling = false;
        this.onMouseMove = null;
      };

      FScrollBarClass.prototype.startTrackScroller = function () {
        this.controller.trackScroller();
        this.controller.scrolling = setInterval(this.controller, 'scrollInterval', 500, 'page', -1);
      };

      FScrollBarClass.prototype.scrollInterval = function (inc, mode) {
        clearInterval(this.scrolling);
        if (inc == 'page') {
          this.trackScroller();
        } else {
          this.scrollIt(inc, mode);
        }
        this.scrolling = setInterval(this, 'scrollInterval', 35, inc, mode);
      };

      FScrollBarClass.prototype.trackScroller = function () {
        if (this.scrollThumb_mc._y + this.thumbHeight < this._ymouse) {
          this.scrollIt('page', 1);
        } else {
          if (this.scrollThumb_mc._y > this._ymouse) {
            this.scrollIt('page', -1);
          }
        }
      };

      FScrollBarClass.prototype.stopScrolling = function () {
        this.controller.downArrow_mc.gotoAndStop(1);
        this.controller.upArrow_mc.gotoAndStop(1);
        clearInterval(this.controller.scrolling);
      };

      FScrollBarClass.prototype.startUpScroller = function () {
        this.controller.upArrow_mc.gotoAndStop(2);
        this.controller.scrollIt('one', -1);
        this.controller.scrolling = setInterval(this.controller, 'scrollInterval', 500, 'one', -1);
      };

      FScrollBarClass.prototype.startDownScroller = function () {
        this.controller.downArrow_mc.gotoAndStop(2);
        this.controller.scrollIt('one', 1);
        this.controller.scrolling = setInterval(this.controller, 'scrollInterval', 500, 'one', 1);
      };

      FScrollBarClass.prototype.setScrollTarget = function (tF) {
        if (tF == undefined) {
          this.textField.removeListener(this);
          delete this.textField[this.horizontal ? 'hScroller' : 'vScroller'];
          if (this.textField.hScroller != undefined && this.textField.vScroller != undefined) {
            this.textField.unwatch('text');
            this.textField.unwatch('htmltext');
          }
        }
        this.textField = undefined;
        if (!(tF instanceof TextField)) {
          return undefined;
        }
        this.textField = tF;
        this.textField[this.horizontal ? 'hScroller' : 'vScroller'] = this;
        this.onTextChanged();
        this.onChanged = function () {
          this.onTextChanged();
        };

        this.onScroller = function () {
          if (!this.isScrolling) {
            if (!this.horizontal) {
              this.setScrollPosition(this.textField.scroll);
            } else {
              this.setScrollPosition(this.textField.hscroll);
            }
          }
        };

        this.textField.addListener(this);
        this.textField.watch('text', this.callback);
        this.textField.watch('htmlText', this.callback);
      };

      FScrollBarClass.prototype.callback = function (prop, oldVal, newVal) {
        clearInterval(this.hScroller.synchScroll);
        clearInterval(this.vScroller.synchScroll);
        this.hScroller.synchScroll = setInterval(this.hScroller, 'onTextChanged', 50);
        this.vScroller.synchScroll = setInterval(this.vScroller, 'onTextChanged', 50);
        return newVal;
      };

      FScrollBarClass.prototype.onTextChanged = function () {
        if (!this.enable || this.textField == undefined) {
          return undefined;
        }
        clearInterval(this.synchScroll);
        if (this.horizontal) {
          var pos = this.textField.hscroll;
          this.setScrollProperties(this.textField._width, 0, this.textField.maxhscroll);
          this.setScrollPosition(Math.min(pos, this.textField.maxhscroll));
        } else {
          var pos = this.textField.scroll;
          var pageSize = this.textField.bottomScroll - this.textField.scroll;
          this.setScrollProperties(pageSize, 1, this.textField.maxscroll);
          this.setScrollPosition(Math.min(pos, this.textField.maxscroll));
        }
      };

      FScrollBarClass.prototype.executeCallBack = function () {
        if (this.textField == undefined) {
          super.executeCallBack();
        } else {
          if (this.horizontal) {
            this.textField.hscroll = this.getScrollPosition();
          } else {
            this.textField.scroll = this.getScrollPosition();
          }
        }
      };

      Object.registerClass('FScrollBarSymbol', FScrollBarClass);
    #endinitclip

    frame 1 {
    }
  }

  frame 1 {
    function AnnoUpdate() {
      var out = MMExecute(Stage.name_funcs);
      if (out.length) {
        out = out.split('\n');
        if (out.length == 2) {
          selection_mc._visible = true;
          selection_mc.sel_txt.text = out[0];
          selection_mc.sel_icon.gotoAndStop(out[1]);
        } else {
          selection_mc._visible = false;
        }
      } else {
        selection_mc._visible = false;
      }
      var cmd = '\nfunction getAnno(){\n';
      cmd += 'if (fw.selection.length == 1){\n';
      cmd += 'if (fw.selection[0].customData.annotations){\n';
      cmd += 'return fw.selection[0].customData.annotations\n';
      cmd += '}\n';
      cmd += '}else if (fw.selection.length == 0){\n';
      cmd += 'if (fw.getDocumentDOM().pngText.annotations){\n';
      cmd += 'return fw.getDocumentDOM().pngText.annotations\n';
      cmd += '}\n';
      cmd += '}\n';
      cmd += 'return \'\';\n';
      cmd += '}\n';
      cmd += 'if (fw.getDocumentDOM()) getAnno();\n';
      cmd += 'else \'\';';
      input.text = ((MMExecute(cmd)).split('\n\n\n\n')).join('\n');
    }

    function onFwActiveDocumentChange() {
      AnnoUpdate();
    }

    function onFwStartMovie() {
      if (footer.autoupdate.checked) {
        AnnoUpdate();
      }
      Stage.onResize();
    }

    function onFwActiveSelectionChange() {
      if (footer.autoupdate.checked) {
        AnnoUpdate();
      }
    }

    stop();
    Stage.scaleMode = 'noScale';
    Stage.align = 'TL';
    Stage.showMenu = false;
    Stage.addListener(Stage);
    Stage.onResize = function () {
      background._width = this.width;
      background._height = this.height;
      updateTextBoxes();
      updateScrollbars();
      updateInterface();
      onEnterFrame = function () {
        mainscroll.onTextChanged();
        delete this.onEnterFrame;
      };

    };

    Stage.name_funcs = scripts.name_funcs.text;
    scripts.swapDepths(100);
    scripts.removeMovieClip();
    add_btn.onRelease = function () {
      MMExecute('\nvar txt = unescape(\'' + escape(input.text) + '\');\n');
      var cmd = 'if (fw.selection.length == 1){\n';
      cmd += 'fw.selection[0].customData.annotations = txt;\n';
      cmd += 'fw.getDocumentDOM().isDirty = true;\n';
      cmd += '}else if (fw.selection.length == 0){\n';
      cmd += 'fw.getDocumentDOM().pngText.annotations = txt;\n';
      cmd += 'fw.getDocumentDOM().isDirty = true;\n';
      cmd += '}\n';
      MMExecute(cmd);
    };

    footer.update_btn.onRelease = function () {
      AnnoUpdate();
    };

    remove_btn.onRelease = function () {
      input.text = '';
      add_btn.onRelease();
    };

    edit_btn.onRelease = function () {
      add_btn.onRelease();
    };

    icon_clear.new_btn.onRelease = function () {
      input.text = '';
      add_btn.onRelease();
    };

  }

  frame 1 {
    TEXT = new Object();
    TEXT.TOP = 35;
    TEXT.BOTTOM = 53;
    TEXT.LEFT = 5;
    TEXT.RIGHT = 21;
    format = new TextFormat('Arial', 12, 0);
    setTextProps = function (txt) {
      txt.type = 'input';
      txt.border = true;
      txt.borderColor = 0;
      txt.background = 16777215;
      txt.multiline = true;
      txt.wordWrap = true;
      txt.setNewTextFormat(format);
    };

    this.createTextField('input', 1, TEXT.LEFT, TEXT.TOP, Stage.width - TEXT.LEFT - TEXT.RIGHT, Stage.height - TEXT.TOP - TEXT.BOTTOM);
    setTextProps(input);
    mainscroll.setScrollTarget(input);
    updateTextBoxes = function () {
      input._width = Stage.width - TEXT.LEFT - TEXT.RIGHT;
      input._height = Stage.height - TEXT.TOP - TEXT.BOTTOM;
    };

    updateScrollbars = function () {
      mainscroll.setSize(input._height);
      mainscroll._x = input._x + input._width;
    };

    updateInterface = function () {
      selection_mc._y = input._y + input._height + 5;
      icon_clear._x = Stage.width - 25;
      footer._y = Stage.height;
      bottombar._y = Stage.height;
      bottombar._width = Stage.width;
    };

  }

  movieClip 147  {
  }

  instance mainscroll of movieClip 145 FScrollBarSymbol {

    onClipEvent (initialize) {
      _targetInstanceName = 'input';
      horizontal = false;
    }
  }

  movieClip 149  {
  }

  movieClip 151  {
  }

  movieClip 157  {
  }

  movieClip 160  {

    instance autoupdate of movieClip 112 FCheckBoxSymbol {

      onClipEvent (initialize) {
        label = ' Auto Update';
        initialValue = true;
        labelPlacement = 'right';
        changeHandler = '';
      }
    }
  }
}
