
var autoshapename = "Scale-9 Component";
var version = "0.9.7";

var defaultHeight = 20;
var defaultWidth = 20;
var cpOffsetX = -10;
var cpOffsetY = 0;
var cpStateStart = 10;

var defaultText = "Sample";
var scriptDirectory = fw.appDir + "/Configuration/Shared/senocular/Scale%20Components";
if (!Files.exists(scriptDirectory)) scriptDirectory = fw.userSmartShapesDir.substr(0,fw.userSmartShapesDir.lastIndexOf("/")) + "/Shared/senocular/Scale%20Components";
var sliceScript = scriptDirectory + "/Define%20Slice.swf";
var optionsScript = scriptDirectory + "/Options-9.swf";

var mouse = smartShape.currentMousePos;
mouse.x = Math.round(mouse.x);
mouse.y = Math.round(mouse.y);
var cps = smartShape.elem.controlPoints;
var debug = "";

var q1 = 1;
var q2 = 2;
var q3 = 3;
var q4 = 4;
var q6 = 5;
var q7 = 6;
var q8 = 7;
var q9 = 8;
var q5 = 9;

/* ****************************************
SMARTSHAPE EVENTS
**************************************** */
operation = new Object();
operation.InsertSmartShapeAt = function(){
	
	var stateOffset = {x:cpOffsetY, y:cpOffsetX};
	var stateSpacing = 8;
	
	smartShape.elem.elements[0] = new Group();
	smartShape.elem.elements[0].elements[0] = new Group(); // reserved for text if added
	var opt = smartShape.elem.elements[0]
	opt.customData.optionsObj = new Object();
	opt.customData.optionsObj.usetext = "0"; // 0 = false, 1 = true 
	opt.customData.optionsObj.showstates = 0; // 0 = false, 1 = true 
	opt.customData.optionsObj.version = version;
	opt.customData.optionsObj.autoshapename = autoshapename;
	
	cps.length = 14;
	SetControlPoint(0, AddPoints(mouse, {x:cpOffsetX, y:cpOffsetY}), "Options", "Options", false);
	
	SetControlPoint(10, AddPoints(mouse, stateOffset), "10", "Up State", false);
	SetControlPoint(11, AddPoints(cps[10], {x:stateSpacing, y:0}), "11", "Over State", false);
	SetControlPoint(12, AddPoints(cps[11], {x:stateSpacing, y:0}), "12", "Down State", false);
	SetControlPoint(13, AddPoints(cps[12], {x:stateSpacing, y:0}), "13", "Over Down State", false);
	cps[10].type = "defaultInverted";
	
	// must be in order or element number as by q1-q9
	CreateShape(q1, 1, "Top-Left");
	CreateShape(q2, 2, "Top-Center");
	CreateShape(q3, 3, "Top-Right");
	CreateShape(q4, 4, "Middle-Left");
	CreateShape(q6, 6, "Middle-Right");
	CreateShape(q7, 7, "Bottom-Left");
	CreateShape(q8, 8, "Bottom-Center");
	CreateShape(q9, 9, "Bottom-Right");
	CreateShape(q5, 5, "Middle-Center");
	
	operation.RedrawSmartShape();
}
CreateShape = function(num, slice, toolTip){
	smartShape.elem.elements[num] = new Path();
	elem = smartShape.elem.elements[num];
	DefineSliceObj(elem, defaultWidth/2, defaultHeight/2, num);
	SetControlPoint(num, mouse, "slice"+slice, toolTip, true);
	DrawElem(elem);
}
operation.BeginDragControlPoint = function(){
	smartShape.elem.customData.hasMoved = false;
	
	AsureUniqueCustomData();
	UpdateTextLocation();
	
	var cp = smartShape.currentControlPoint;
	smartShape.getsDragEvents = true;
	
	var elems = smartShape.elem.elements;
	var parms = smartShape.GetDefaultMoveParms();
	parms.minMaxRelative = true;

	var lmax = elems[q1].customData.sliceObj.width;
	lmax = Math.max(lmax, elems[q4].customData.sliceObj.width);
	lmax = Math.max(lmax, elems[q7].customData.sliceObj.width);
	var rmax = elems[q3].customData.sliceObj.width;
	rmax = Math.max(rmax, elems[q6].customData.sliceObj.width);
	rmax = Math.max(rmax, elems[q9].customData.sliceObj.width);
	var tmax = elems[q1].customData.sliceObj.height;
	tmax = Math.max(tmax, elems[q2].customData.sliceObj.height);
	tmax = Math.max(tmax, elems[q3].customData.sliceObj.height);
	var bmax = elems[q7].customData.sliceObj.height;
	bmax = Math.max(bmax, elems[q8].customData.sliceObj.height);
	bmax = Math.max(bmax, elems[q9].customData.sliceObj.height);
	
	var hmax = (elems[q3].contours[0].nodes[1].x - elems[q1].contours[0].nodes[0].x) - (lmax + rmax);
	
	var vmax = (elems[q7].contours[0].nodes[3].y - elems[q1].contours[0].nodes[0].y) - (bmax + tmax);

	switch(cp.name){
		case "slice1":
			parms.maxX = hmax;
			parms.maxY = vmax;
			cps[0].RegisterMove(parms); // options/states
			cps[10].RegisterMove(parms);
			cps[11].RegisterMove(parms);
			cps[12].RegisterMove(parms);
			cps[13].RegisterMove(parms);
			
			RegisterMoveRect(elems[q1], parms);
			cp.RegisterMove(parms);
			
			elems[q2].contours[0].nodes[0].RegisterMove(parms);
			elems[q2].contours[0].nodes[3].RegisterMove(parms);
			
			elems[q4].contours[0].nodes[0].RegisterMove(parms);
			elems[q4].contours[0].nodes[1].RegisterMove(parms);
			
			elems[q5].contours[0].nodes[0].RegisterMove(parms);
			
			parms.deltaXtoX = 0;
			RegisterMoveRect(elems[q3], parms);
			cps[q3].RegisterMove(parms);
			
			elems[q2].contours[0].nodes[1].RegisterMove(parms);
			elems[q2].contours[0].nodes[2].RegisterMove(parms);
			
			elems[q6].contours[0].nodes[0].RegisterMove(parms);
			elems[q6].contours[0].nodes[1].RegisterMove(parms);
			
			elems[q5].contours[0].nodes[1].RegisterMove(parms);
			
			parms.deltaXtoX = 1;
			parms.deltaYtoY = 0;
			RegisterMoveRect(elems[q7], parms);
			cps[q7].RegisterMove(parms);
			
			elems[q4].contours[0].nodes[2].RegisterMove(parms);
			elems[q4].contours[0].nodes[3].RegisterMove(parms);
			
			elems[q8].contours[0].nodes[0].RegisterMove(parms);
			elems[q8].contours[0].nodes[3].RegisterMove(parms);
			
			elems[q5].contours[0].nodes[3].RegisterMove(parms);
			
			// halfs
			parms.maxX = hmax;
			parms.maxY = vmax/2;
			parms.deltaXtoX = 0;
			parms.deltaYtoY = .5;
			cps[q6].RegisterMove(parms);
			
			parms.deltaXtoX = 1;
			parms.deltaYtoY = .5;
			cps[q4].RegisterMove(parms);

			parms.maxX = hmax/2;
			parms.maxY = vmax;
			parms.deltaXtoX = .5;
			parms.deltaYtoY = 1;
			cps[q2].RegisterMove(parms);
			
			parms.deltaXtoX = .5;
			parms.deltaYtoY = 0;
			cps[q8].RegisterMove(parms);
			
			parms.maxX = hmax/2;
			parms.maxY = vmax/2;
			parms.deltaXtoX = .5;
			parms.deltaYtoY = .5;
			cps[q5].RegisterMove(parms);
			break;
			
		case "slice3":
			hmax = -hmax;
			parms.minX = hmax;
			parms.maxY = vmax;
			RegisterMoveRect(elems[q3], parms);
			cp.RegisterMove(parms);
			
			elems[q2].contours[0].nodes[1].RegisterMove(parms);
			elems[q2].contours[0].nodes[2].RegisterMove(parms);
			
			elems[q6].contours[0].nodes[0].RegisterMove(parms);
			elems[q6].contours[0].nodes[1].RegisterMove(parms);
			
			elems[q5].contours[0].nodes[1].RegisterMove(parms);
			
			parms.deltaXtoX = 0;
			cps[0].RegisterMove(parms); // options/states
			cps[10].RegisterMove(parms);
			cps[11].RegisterMove(parms);
			cps[12].RegisterMove(parms);
			cps[13].RegisterMove(parms);
			
			RegisterMoveRect(elems[q1], parms);
			cps[q1].RegisterMove(parms);
			
			elems[q2].contours[0].nodes[0].RegisterMove(parms);
			elems[q2].contours[0].nodes[3].RegisterMove(parms);
			
			elems[q4].contours[0].nodes[0].RegisterMove(parms);
			elems[q4].contours[0].nodes[1].RegisterMove(parms);
			
			elems[q5].contours[0].nodes[0].RegisterMove(parms);
			
			parms.deltaXtoX = 1;
			parms.deltaYtoY = 0;
			RegisterMoveRect(elems[q9], parms);
			cps[q9].RegisterMove(parms);
			
			elems[q6].contours[0].nodes[2].RegisterMove(parms);
			elems[q6].contours[0].nodes[3].RegisterMove(parms);
			
			elems[q8].contours[0].nodes[1].RegisterMove(parms);
			elems[q8].contours[0].nodes[2].RegisterMove(parms);
			
			elems[q5].contours[0].nodes[2].RegisterMove(parms);
			
			// halfs
			parms.minX = hmax;
			parms.maxY = vmax/2;
			parms.deltaXtoX = 0;
			parms.deltaYtoY = .5;
			cps[q4].RegisterMove(parms);
			
			parms.deltaXtoX = 1;
			parms.deltaYtoY = .5;
			cps[q6].RegisterMove(parms);

			parms.minX = hmax/2;
			parms.maxY = vmax;
			parms.deltaXtoX = .5;
			parms.deltaYtoY = 1;
			cps[q2].RegisterMove(parms);
			
			parms.deltaXtoX = .5;
			parms.deltaYtoY = 0;
			cps[q8].RegisterMove(parms);
			
			parms.minX = hmax/2;
			parms.maxY = vmax/2;
			parms.deltaXtoX = .5;
			parms.deltaYtoY = .5;
			cps[q5].RegisterMove(parms);
			break;
			
		case "slice7":
			vmax = -vmax
			parms.maxX = hmax;
			parms.minY = vmax;
			RegisterMoveRect(elems[q7], parms);
			cp.RegisterMove(parms);
			
			elems[q8].contours[0].nodes[0].RegisterMove(parms);
			elems[q8].contours[0].nodes[3].RegisterMove(parms);
			
			elems[q4].contours[0].nodes[2].RegisterMove(parms);
			elems[q4].contours[0].nodes[3].RegisterMove(parms);
			
			elems[q5].contours[0].nodes[3].RegisterMove(parms);
			
			parms.deltaXtoX = 0;
			RegisterMoveRect(elems[q9], parms);
			cps[q9].RegisterMove(parms);
			
			elems[q6].contours[0].nodes[2].RegisterMove(parms);
			elems[q6].contours[0].nodes[3].RegisterMove(parms);
			
			elems[q8].contours[0].nodes[1].RegisterMove(parms);
			elems[q8].contours[0].nodes[2].RegisterMove(parms);
			
			elems[q5].contours[0].nodes[2].RegisterMove(parms);
			
			parms.deltaXtoX = 1;
			parms.deltaYtoY = 0;
			cps[0].RegisterMove(parms); // options/states
			cps[10].RegisterMove(parms);
			cps[11].RegisterMove(parms);
			cps[12].RegisterMove(parms);
			cps[13].RegisterMove(parms);
			
			RegisterMoveRect(elems[q1], parms);
			cps[q1].RegisterMove(parms);
			
			elems[q4].contours[0].nodes[0].RegisterMove(parms);
			elems[q4].contours[0].nodes[1].RegisterMove(parms);
			
			elems[q2].contours[0].nodes[0].RegisterMove(parms);
			elems[q2].contours[0].nodes[3].RegisterMove(parms);
			
			elems[q5].contours[0].nodes[0].RegisterMove(parms);
			
			// halfs
			parms.maxX = hmax;
			parms.minY = vmax/2;
			parms.deltaXtoX = 0;
			parms.deltaYtoY = .5;
			cps[q6].RegisterMove(parms);
			
			parms.deltaXtoX = 1;
			parms.deltaYtoY = .5;
			cps[q4].RegisterMove(parms);

			parms.maxX = hmax/2;
			parms.minY = vmax;
			parms.deltaXtoX = .5;
			parms.deltaYtoY = 1;
			cps[q8].RegisterMove(parms);
			
			parms.deltaXtoX = .5;
			parms.deltaYtoY = 0;
			cps[q2].RegisterMove(parms);
			
			parms.maxX = hmax/2;
			parms.minY = vmax/2;
			parms.deltaXtoX = .5;
			parms.deltaYtoY = .5;
			cps[q5].RegisterMove(parms);
			break;
			
		case "slice9":
			hmax = -hmax;
			vmax = -vmax;
			parms.minX = hmax;
			parms.minY = vmax;
			RegisterMoveRect(elems[q9], parms);
			cp.RegisterMove(parms);
			
			elems[q8].contours[0].nodes[1].RegisterMove(parms);
			elems[q8].contours[0].nodes[2].RegisterMove(parms);
			
			elems[q6].contours[0].nodes[2].RegisterMove(parms);
			elems[q6].contours[0].nodes[3].RegisterMove(parms);
			
			elems[q5].contours[0].nodes[2].RegisterMove(parms);
			
			parms.deltaXtoX = 0;
			RegisterMoveRect(elems[q7], parms);
			cps[q7].RegisterMove(parms);
			
			elems[q8].contours[0].nodes[0].RegisterMove(parms);
			elems[q8].contours[0].nodes[3].RegisterMove(parms);
			
			elems[q4].contours[0].nodes[2].RegisterMove(parms);
			elems[q4].contours[0].nodes[3].RegisterMove(parms);
			
			elems[q5].contours[0].nodes[3].RegisterMove(parms);
			
			parms.deltaXtoX = 1;
			parms.deltaYtoY = 0;
			RegisterMoveRect(elems[q3], parms);
			cps[q3].RegisterMove(parms);
			
			elems[q2].contours[0].nodes[1].RegisterMove(parms);
			elems[q2].contours[0].nodes[2].RegisterMove(parms);
			
			elems[q6].contours[0].nodes[0].RegisterMove(parms);
			elems[q6].contours[0].nodes[1].RegisterMove(parms);
			
			elems[q5].contours[0].nodes[1].RegisterMove(parms);
			
			// halfs
			parms.minX = hmax;
			parms.minY = vmax/2;
			parms.deltaXtoX = 0;
			parms.deltaYtoY = .5;
			cps[q4].RegisterMove(parms);
			
			parms.deltaXtoX = 1;
			parms.deltaYtoY = .5;
			cps[q6].RegisterMove(parms);

			parms.minX = hmax/2;
			parms.minY = vmax;
			parms.deltaXtoX = .5;
			parms.deltaYtoY = 1;
			cps[q8].RegisterMove(parms);
			
			parms.deltaXtoX = .5;
			parms.deltaYtoY = 0;
			cps[q2].RegisterMove(parms);
			
			parms.minX = hmax/2;
			parms.minY = vmax/2;
			parms.deltaXtoX = .5;
			parms.deltaYtoY = .5;
			cps[q5].RegisterMove(parms);
			break;
			
		case "slice2":
			parms.maxY = vmax;
			parms.deltaXtoX = 0;
			cps[0].RegisterMove(parms); // options/states
			cps[10].RegisterMove(parms);
			cps[11].RegisterMove(parms);
			cps[12].RegisterMove(parms);
			cps[13].RegisterMove(parms);
			
			RegisterMoveRect(elems[q1], parms);
			cps[q1].RegisterMove(parms);
			RegisterMoveRect(elems[q2], parms);
			cp.RegisterMove(parms);
			RegisterMoveRect(elems[q3], parms);
			cps[q3].RegisterMove(parms);
			
			elems[q4].contours[0].nodes[0].RegisterMove(parms);
			elems[q4].contours[0].nodes[1].RegisterMove(parms);
			elems[q5].contours[0].nodes[0].RegisterMove(parms);
			elems[q5].contours[0].nodes[1].RegisterMove(parms);
			elems[q6].contours[0].nodes[0].RegisterMove(parms);
			elems[q6].contours[0].nodes[1].RegisterMove(parms);
			
			parms.deltaYtoY = .5;
			parms.maxY = vmax/2;
			cps[q4].RegisterMove(parms);
			cps[q5].RegisterMove(parms);
			cps[q6].RegisterMove(parms);
			break;
			
		case "slice4":
			parms.maxX = hmax;
			parms.deltaYtoY = 0;
			cps[0].RegisterMove(parms); // options/states
			cps[10].RegisterMove(parms);
			cps[11].RegisterMove(parms);
			cps[12].RegisterMove(parms);
			cps[13].RegisterMove(parms);
			
			RegisterMoveRect(elems[q1], parms);
			cps[q1].RegisterMove(parms);
			RegisterMoveRect(elems[q4], parms);
			cp.RegisterMove(parms);
			RegisterMoveRect(elems[q7], parms);
			cps[q7].RegisterMove(parms);
			
			elems[q2].contours[0].nodes[0].RegisterMove(parms);
			elems[q2].contours[0].nodes[3].RegisterMove(parms);
			elems[q5].contours[0].nodes[0].RegisterMove(parms);
			elems[q5].contours[0].nodes[3].RegisterMove(parms);
			elems[q8].contours[0].nodes[0].RegisterMove(parms);
			elems[q8].contours[0].nodes[3].RegisterMove(parms);
			
			parms.deltaXtoX = .5;
			parms.maxX = hmax/2;
			cps[q2].RegisterMove(parms);
			cps[q5].RegisterMove(parms);
			cps[q8].RegisterMove(parms);
			break;
			
		case "slice6":
			hmax = -hmax;
			parms.minX = hmax;
			parms.deltaYtoY = 0;
			
			RegisterMoveRect(elems[q3], parms);
			cps[q3].RegisterMove(parms);
			RegisterMoveRect(elems[q6], parms);
			cp.RegisterMove(parms);
			RegisterMoveRect(elems[q9], parms);
			cps[q9].RegisterMove(parms);
			
			elems[q2].contours[0].nodes[1].RegisterMove(parms);
			elems[q2].contours[0].nodes[2].RegisterMove(parms);
			elems[q5].contours[0].nodes[1].RegisterMove(parms);
			elems[q5].contours[0].nodes[2].RegisterMove(parms);
			elems[q8].contours[0].nodes[1].RegisterMove(parms);
			elems[q8].contours[0].nodes[2].RegisterMove(parms);
			
			parms.deltaXtoX = .5;
			parms.minX = hmax/2;
			cps[q2].RegisterMove(parms);
			cps[q5].RegisterMove(parms);
			cps[q8].RegisterMove(parms);			
			break;
			
		case "slice8":
			vmax = -vmax;
			parms.minY = vmax;
			parms.deltaXtoX = 0;
			
			RegisterMoveRect(elems[q7], parms);
			cps[q7].RegisterMove(parms);
			RegisterMoveRect(elems[q8], parms);
			cp.RegisterMove(parms);
			RegisterMoveRect(elems[q9], parms);
			cps[q9].RegisterMove(parms);
			
			elems[q4].contours[0].nodes[2].RegisterMove(parms);
			elems[q4].contours[0].nodes[3].RegisterMove(parms);
			elems[q5].contours[0].nodes[2].RegisterMove(parms);
			elems[q5].contours[0].nodes[3].RegisterMove(parms);
			elems[q6].contours[0].nodes[2].RegisterMove(parms);
			elems[q6].contours[0].nodes[3].RegisterMove(parms);
			
			parms.deltaYtoY = .5;
			parms.minY = vmax/2;
			cps[q4].RegisterMove(parms);
			cps[q5].RegisterMove(parms);
			cps[q6].RegisterMove(parms);
			break;
	}
}
operation.DragControlPoint = function(){
	smartShape.elem.customData.hasMoved = true;
	UpdateToolTips();
}
operation.EndDragControlPoint = function(){
	// check for dialog openening
	if (!smartShape.elem.customData.hasMoved){
		var cp = smartShape.currentControlPoint;
		switch(cp.name){
			case "Options":
				if (smartShape.ctrlCmdKeyDown){
					UpdatePatternSizes();
					operation.RedrawSmartShape();
					break;
				}
				ComponentAutoShapeChannel = SerializeOptionsObj();
				if ( RunFlashScript(optionsScript, false) ) operation.RedrawSmartShape();
				break;
				
			case "10":
			case "11":
			case "12":
			case "13":
				if (!cp.visible) break;
				var state = GetCurrentStateCp();
				var clicked = parseInt(cp.name, 10);
				cps[state].type = "default";
				cps[clicked].type = "defaultInverted";
				if (smartShape.ctrlCmdKeyDown) {
					if (fw.yesNoDialog("Do you want to copy the "+cps[state].toolTip+" to the "+cps[clicked].toolTip+"?")){
						CopyStates(state-cpStateStart, clicked-cpStateStart);
					}
				}
				operation.RedrawSmartShape();
				break;
			
			case "slice1":
			case "slice2":
			case "slice3":
			case "slice4":
			case "slice5":
			case "slice6":
			case "slice7":
			case "slice8":
			case "slice9":
				var elem = smartShape.elem.elements[cp.index];
				ComponentAutoShapeChannel = SerializeSliceObj( elem.customData.sliceObj );
				if ( RunFlashScript(sliceScript, smartShape.ctrlCmdKeyDown) ) operation.RedrawSmartShape();
				break;
		}
	}else{
		operation.RedrawSmartShape();
	}
}
operation.RedrawSmartShape = function(){
	// assume all elements have been created
	cps[0].x = Math.round(cps[0].x);
	cps[0].y = Math.round(cps[0].y);
	var reg = AddPoints(cps[0], {x:-cpOffsetX, y:-cpOffsetY});
	var offset;
	var elems = smartShape.elem.elements;
	
	// top left (init ref)
	// q1
	SetNodePosition(elems[q1].contours[0].nodes[0], reg);
	DrawElem(elems[q1]);
	
	var lmin = elems[q1].customData.sliceObj.width;
	lmin = Math.min(lmin, elems[q4].customData.sliceObj.width);
	lmin = Math.min(lmin, elems[q7].customData.sliceObj.width);
	var lmax = elems[q1].customData.sliceObj.width;
	lmax = Math.max(lmax, elems[q4].customData.sliceObj.width);
	lmax = Math.max(lmax, elems[q7].customData.sliceObj.width);
	
	var rmin = elems[q3].customData.sliceObj.width;
	rmin = Math.min(rmin, elems[q6].customData.sliceObj.width);
	rmin = Math.min(rmin, elems[q9].customData.sliceObj.width);
	var rmax = elems[q3].customData.sliceObj.width;
	rmax = Math.max(rmax, elems[q6].customData.sliceObj.width);
	rmax = Math.max(rmax, elems[q9].customData.sliceObj.width);
	
	var tmin = elems[q1].customData.sliceObj.height;
	tmin = Math.min(tmin, elems[q2].customData.sliceObj.height);
	tmin = Math.min(tmin, elems[q3].customData.sliceObj.height);
	var tmax = elems[q1].customData.sliceObj.height;
	tmax = Math.max(tmax, elems[q2].customData.sliceObj.height);
	tmax = Math.max(tmax, elems[q3].customData.sliceObj.height);
	
	var bmin = elems[q7].customData.sliceObj.height;
	bmin = Math.min(bmin, elems[q8].customData.sliceObj.height);
	bmin = Math.min(bmin, elems[q9].customData.sliceObj.height);
	var bmax = elems[q7].customData.sliceObj.height;
	bmax = Math.max(bmax, elems[q8].customData.sliceObj.height);
	bmax = Math.max(bmax, elems[q9].customData.sliceObj.height);
		
	var right = Math.max(elems[q3].contours[0].nodes[1].x, reg.x + lmax + rmax);
	var bottom = Math.max(elems[q9].contours[0].nodes[2].y, reg.y + tmax + bmax);
		
	// remaining top row
	// q3
	SetNodePosition(elems[q3].contours[0].nodes[0], {x:right-elems[q3].customData.sliceObj.width, y:reg.y});
	DrawElem(elems[q3]);
	// q2
	SetNodePosition(elems[q2].contours[0].nodes[0], elems[q1].contours[0].nodes[1]);
	DrawElem(elems[q2]);
	SetNodePosition(elems[q2].contours[0].nodes[1], PointRound({x:elems[q3].contours[0].nodes[0].x, y:elems[q2].contours[0].nodes[1].y}));
	SetNodePosition(elems[q2].contours[0].nodes[2], PointRound({x:elems[q3].contours[0].nodes[0].x, y:elems[q2].contours[0].nodes[2].y}));
	
	// bottom row
	// q7
	SetNodePosition(elems[q7].contours[0].nodes[0], {x:reg.x, y:bottom-elems[q7].customData.sliceObj.height});
	DrawElem(elems[q7]);
	// q9
	SetNodePosition(elems[q9].contours[0].nodes[0], {x:right-elems[q9].customData.sliceObj.width, y:bottom-elems[q9].customData.sliceObj.height});
	DrawElem(elems[q9]);
	// q8
	SetNodePosition(elems[q8].contours[0].nodes[0], PointRound({x:elems[q7].contours[0].nodes[1].x, y:bottom-elems[q8].customData.sliceObj.height}));
	DrawElem(elems[q8]);
	SetNodePosition(elems[q8].contours[0].nodes[1], PointRound({x:elems[q9].contours[0].nodes[0].x, y:elems[q8].contours[0].nodes[1].y}));
	SetNodePosition(elems[q8].contours[0].nodes[2], PointRound({x:elems[q9].contours[0].nodes[0].x, y:elems[q8].contours[0].nodes[2].y}));
	
	// middle row
	// q4
	SetNodePosition(elems[q4].contours[0].nodes[0], PointRound(elems[q1].contours[0].nodes[3]));
	DrawElem(elems[q4]);
	SetNodePosition(elems[q4].contours[0].nodes[2], PointRound({x:elems[q4].contours[0].nodes[2].x, y:elems[q7].contours[0].nodes[0].y}));
	SetNodePosition(elems[q4].contours[0].nodes[3], PointRound({x:elems[q4].contours[0].nodes[3].x, y:elems[q7].contours[0].nodes[0].y}));
	// q6
	SetNodePosition(elems[q6].contours[0].nodes[0], PointRound({x:right-elems[q6].customData.sliceObj.width, y:elems[q3].contours[0].nodes[3].y}));
	DrawElem(elems[q6]);
	SetNodePosition(elems[q6].contours[0].nodes[2], PointRound({x:elems[q6].contours[0].nodes[2].x, y:elems[q9].contours[0].nodes[0].y}));
	SetNodePosition(elems[q6].contours[0].nodes[3], PointRound({x:elems[q6].contours[0].nodes[3].x, y:elems[q9].contours[0].nodes[0].y}));
	
	
	// q5
	SetNodePosition(elems[q5].contours[0].nodes[0], {x:reg.x+lmin, y:reg.y+tmin});
	DrawElem(elems[q5]);
	SetNodePosition(elems[q5].contours[0].nodes[1], PointRound({x:right-rmin, y:elems[q5].contours[0].nodes[0].y}));
	SetNodePosition(elems[q5].contours[0].nodes[3], PointRound({x:elems[q5].contours[0].nodes[0].x, y:bottom-bmin}));
	SetNodePosition(elems[q5].contours[0].nodes[2], PointRound({x:elems[q5].contours[0].nodes[1].x, y:elems[q5].contours[0].nodes[3].y}));
	
	var opt = smartShape.elem.elements[0];
	ShowStates(opt.customData.optionsObj.showstates);
	
	RestoreToolTips();
	UpdateAllPatternHandles();
	UpdateControlPoints();
	AddText(smartShape.elem.elements[0].customData.optionsObj.usetext);
	UpdateText();
}

/* ****************************************
INTERACTING
**************************************** */
RegisterMoveRect = function(elem, parms){
	var nods = elem.contours[0].nodes;
	nods[0].RegisterMove( parms );
	nods[1].RegisterMove( parms );
	nods[2].RegisterMove( parms );
	nods[3].RegisterMove( parms );
}
RunFlashScript = function(script, applyAll){
	if (Files.exists(script)){
		fw.runScript(script);
		return UpdateFromFlash(script, applyAll);
	}
	var asname = smartShape.elem.elements[0].customData.optionsObj.autoshapename;
	alert("Error: Unable to locate dialog.\nMake sure you have the "+asname+" Auto Shape installed.");
	return false;
}
SerializeSliceObj = function(sliceObj){
	var str = "";
	var st = GetCurrentStateNum();
	var str = "width=" + sliceObj.width + "&height=" + sliceObj.height;
	var props = ["name","filename","color","px","py","pwidth","pheight","rotate","stretchx","stretchy"];
	for (var i in props){
		str += "&" + props[i] + "=" + escape(sliceObj[props[i]+st]);
	}
	return str;
}
SerializeOptionsObj = function(){
	var opt = smartShape.elem.elements[0];
	str = "version=" + escape(opt.customData.optionsObj.version);
	str += "&usetext=" + escape(opt.customData.optionsObj.usetext);
	str += "&showstates=" + escape(opt.customData.optionsObj.showstates);
	return str;
}
AsureUniqueCustomData = function(){
	var elems = smartShape.elem.elements;
	elems[0].customData.optionsObj = ObjectCopy(elems[0].customData.optionsObj);
	elems[q1].customData.sliceObj = ObjectCopy(elems[q1].customData.sliceObj);
	elems[q2].customData.sliceObj = ObjectCopy(elems[q2].customData.sliceObj);
	elems[q3].customData.sliceObj = ObjectCopy(elems[q3].customData.sliceObj);
	elems[q4].customData.sliceObj = ObjectCopy(elems[q4].customData.sliceObj);
	elems[q5].customData.sliceObj = ObjectCopy(elems[q5].customData.sliceObj);
	elems[q6].customData.sliceObj = ObjectCopy(elems[q6].customData.sliceObj);
	elems[q7].customData.sliceObj = ObjectCopy(elems[q7].customData.sliceObj);
	elems[q8].customData.sliceObj = ObjectCopy(elems[q8].customData.sliceObj);
	elems[q9].customData.sliceObj = ObjectCopy(elems[q9].customData.sliceObj);
}
GetCurrentStateCp = function(){
	var end = cpStateStart + 4; // + # of states
	for (var i=cpStateStart; i<end; i++){
		if (cps[i].type == "defaultInverted") return i;
	}
	cps[cpStateStart].type == "defaultInverted";
	return cpStateStart;
}
GetCurrentStateNum = function(){
	var end = cpStateStart + 4; // + # of states
	for (var i=cpStateStart; i<end; i++){
		if (cps[i].type == "defaultInverted") return i-cpStateStart;
	}
	cps[cpStateStart].type == "defaultInverted";
	return 0;
}
ShowStates = function(visible){
	cps[10].visible = visible;
	cps[11].visible = visible;
	cps[12].visible = visible;
	cps[13].visible = visible;
	if (visible){
		cps[10].toolTip = "Up State";
		cps[11].toolTip = "Over State";
		cps[12].toolTip = "Down State";
		cps[13].toolTip = "Over Down State";
	}else{
		cps[10].toolTip = "";
		cps[11].toolTip = "";
		cps[12].toolTip = "";
		cps[13].toolTip = "";
	}
}

/* ****************************************
UPDATING
**************************************** */
UpdatePatternHandles = function(elem){
	var attrs = elem.pathAttributes;
	var st = GetCurrentStateNum();
	if (!attrs.fill) return;
	if (!attrs.fill.pattern) return;
	var sliceObj = elem.customData.sliceObj;
	var reg = PointFromObj(elem.contours[0].nodes[0]);
	
	var stretch = {x:1, y:1};
	if (parseInt(sliceObj["stretchx"+st], 10)){
		stretch.x = (elem.contours[0].nodes[1].x - elem.contours[0].nodes[0].x)/sliceObj.width;
	}
	if (parseInt(sliceObj["stretchy"+st], 10)){
		stretch.y = (elem.contours[0].nodes[3].y - elem.contours[0].nodes[0].y)/sliceObj.height;
	}	
	
	var pt = {x:sliceObj["px"+st], y:sliceObj["py"+st]};
	var pt2 = {x:sliceObj["pwidth"+st], y:0};
	var pt3 = {x:0, y:-sliceObj["pheight"+st]};
	pt2 = RotatePointAroundPoint(pt2, {x:0, y:0}, sliceObj["rotate"+st]* Math.PI/180);
	pt3 = RotatePointAroundPoint(pt3, {x:0, y:0}, sliceObj["rotate"+st]* Math.PI/180);
	
	pt = MultiplyPoints(pt, stretch);
	pt2 = MultiplyPoints(pt2, stretch);
	pt3 = MultiplyPoints(pt3, stretch);
	
	attrs.fillHandle1 = AddPoints(reg, pt);
	attrs.fillHandle2 = AddPoints(attrs.fillHandle1, pt2);
	attrs.fillHandle3 = AddPoints(attrs.fillHandle1, pt3);
}
UpdateAllPatternHandles = function(){	
	for (var i=1; i<=9; i++) UpdatePatternHandles(smartShape.elem.elements[i]);
}
UpdatePatternSizes = function(){
	var elem, attrs;
	var st = GetCurrentStateNum();
	for (var i=1; i<=9; i++){
		elem = smartShape.elem.elements[i];
		attrs = elem.pathAttributes;
		if (attrs.fill && attrs.fill.pattern && attrs.fill.pattern.name){
			if (!parseInt(elem.customData.sliceObj["stretchx"+st], 10)){
				elem.customData.sliceObj["pwidth"+st] = Math.round(PointDistance(attrs.fillHandle1, attrs.fillHandle2));
			}
			if (!parseInt(elem.customData.sliceObj["stretchy"+st], 10)){
				elem.customData.sliceObj["pheight"+st] = Math.round(PointDistance(attrs.fillHandle1, attrs.fillHandle3));
			}
		}
	}
}
UpdateControlPoints = function(){
	for (var i=1; i<=9; i++) PositionControlPoint(i, smartShape.elem.elements[i]);
}
PositionControlPoint = function(cpnum, elem){
	var cp = cps[cpnum];
	var nods = elem.contours[0].nodes;
	var center = PointAverage(nods[0], nods[2]);
	switch(cpnum){
		case q1:
			cp.x = nods[0].x;
			cp.y = nods[0].y;
			break;
		
		case q2:
			cp.x = center.x;
			cp.y = nods[0].y;
			break;
		
		case q3:
			cp.x = nods[1].x;
			cp.y = nods[1].y;
			break;
		
		case q4:
			cp.x = nods[0].x;
			cp.y = center.y;
			break;

		case q5:
			cp.x = center.x;
			cp.y = center.y;
			break;
		
		case q6:
			cp.x = nods[1].x;
			cp.y = center.y;
			break;

		case q7:
			cp.x = nods[3].x;
			cp.y = nods[3].y;
			break;
		
		case q8:
			cp.x = center.x;
			cp.y = nods[3].y;
			break;

		case q9:
			cp.x = nods[2].x;
			cp.y = nods[2].y;
			break;
	}
	
}
UpdateFromFlash = function( whichScript, applyAll ){
	if (!ComponentAutoShapeChannel) return false;
	var opt = smartShape.elem.elements[0];
	var st = GetCurrentStateNum();
	switch(whichScript){
		case sliceScript:
			var cp = smartShape.currentControlPoint;
			if (applyAll && fw.yesNoDialog("Do you want to apply these changes to all slices in this state?")){
				var elems = [
					smartShape.elem.elements[q1],
					smartShape.elem.elements[q2],
					smartShape.elem.elements[q3],
					smartShape.elem.elements[q4],
					smartShape.elem.elements[q5],
					smartShape.elem.elements[q6],
					smartShape.elem.elements[q7],
					smartShape.elem.elements[q8],
					smartShape.elem.elements[q9]
				];
			}else{
				var elems = [ smartShape.elem.elements[cp.index] ];
			}
			var i = elems.length;
			while(i--){
				CopyPropertiesByState(ComponentAutoShapeChannel, elems[i].customData.sliceObj, st);
			}
			break;
	
		case optionsScript:
			CopyProperties(ComponentAutoShapeChannel, opt.customData.optionsObj);
			ShowStates(opt.customData.optionsObj.showstates);
			break;
	}
	
	// for all scripts
	delete ComponentAutoShapeChannel;
	return true;
}
UpdateText = function(){
	var i = smartShape.elem.elements[0].elements.length;
	var elems = smartShape.elem.elements;
	var left = elems[q1].contours[0].nodes[0].x;
	var right = elems[q3].contours[0].nodes[1].x;
	right = Math.max(right, elems[q6].contours[0].nodes[1].x);
	right = Math.max(right, elems[q9].contours[0].nodes[1].x);
	var elem;
	while (i--){
		elem = smartShape.elem.elements[0].elements[i];
		if (elem.customData.padding){
			elem.rawTop = elems[q1].contours[0].nodes[0].y + elem.customData.padding.top;
			switch(elem.textRuns.initialAttrs.alignment){
				case "center":
					elem.rawLeft = left + ((right-left)/2) - (elem.rawWidth/2);
					break;
				case "right":
					elem.rawLeft = right - (elem.rawWidth + elem.customData.padding.right);
					break;
				default:
					elem.rawLeft = left + elem.customData.padding.left;
			}
		}
	}
}
UpdateTextLocation = function(){
	var i = smartShape.elem.elements[0].elements.length;
	var elems = smartShape.elem.elements;
	var left = elems[q1].contours[0].nodes[0].x;
	var right = elems[q3].contours[0].nodes[1].x;
	right = Math.max(right, elems[q6].contours[0].nodes[1].x);
	right = Math.max(right, elems[q9].contours[0].nodes[1].x);
	var elem;
	while (i--){
		elem = smartShape.elem.elements[0].elements[i];
		elem.customData.padding = {
			top:elem.rawTop - elems[q1].contours[0].nodes[0].y,
			left:elem.rawLeft - left,
			right:right - (elem.rawLeft + elem.rawWidth),
		}
	}
}
AddText = function(newText){
	if (newText){
		if (smartShape.elem.elements[0].elements.length) return;
		smartShape.elem.elements[0].elements[0] = new Text();
		var elem = smartShape.elem.elements[0].elements[0];
		elem.antiAliased = false;
		elem.autoExpand = true;
		elem.autoKern = false;
		elem.orientation = "horizontal left to right";
		elem.rawLeft = 3 + cps[0].x-cpOffsetX;
		elem.rawTop = 3 + cps[0].y-cpOffsetY;
		var pathattrs = { fill:{ category:"fc_Solid", ditherColors:[ "#000000", "#000000" ], edgeType:"hard", feather:0, gradient:null, name:"fn_Normal", pattern:null, shape:"solid", stampingMode:"blend opaque", textureBlend:0, webDitherTransparent:false }, fillColor:"#000000", fillHandle1:{ x:49, y:122 }, fillHandle2:{ x:98, y:122 }, fillHandle3:{ x:49, y:106 }, fillOnTop:false, fillTexture:null };
		CopyProperties(pathattrs, elem.pathAttributes);
		elem.textRuns = { initialAttrs:{ alignment:"left", antiAliasSharpness:192, antiAliasStrength:64, baselineShift:0, bold:false, face:"Arial", fillColor:"#000000", horizontalScale:1, italic:false, leading:1, leadingMode:"percentage", overSample:8, paragraphIndent:0, paragraphSpacingAfter:0, paragraphSpacingBefore:0, rangeKerning:0, size:"12pt", underline:false }, textRuns:[ { changedAttrs:{  }, characters:"Sample" } ] };
		UpdateTextLocation();
	}else{
		smartShape.elem.elements[0].elements.length = 0;
	}
}

/* ****************************************
DEFINING
**************************************** */
DefineSliceObj = function(elem, offx, offy, index){
	var sliceObj = new Object();
	
	// not sent to flash
	sliceObj.x = offx; // used to initially draw slice
	sliceObj.y = offy;
	sliceObj.index = index; // used to identify slice
	
	// common
	sliceObj.width = defaultWidth;
	sliceObj.height = defaultHeight;
	
	// state-based:
	// up
	sliceObj.name0 = "";
	sliceObj.filename0 = "";
	sliceObj.color0 = "#808080";
	sliceObj.px0 = 0;
	sliceObj.py0 = 0;
	sliceObj.pwidth0 = defaultWidth;
	sliceObj.pheight0 = defaultHeight;
	sliceObj.rotate0 = 0;
	sliceObj.stretchx0 = "0";
	sliceObj.stretchy0 = "0";
	
	// over
	sliceObj.name1 = "";
	sliceObj.filename1 = "";
	sliceObj.color1 = "#808080";
	sliceObj.px1 = 0;
	sliceObj.py1 = 0;
	sliceObj.pwidth1 = defaultWidth;
	sliceObj.pheight1 = defaultHeight;
	sliceObj.rotate1 = 0;
	sliceObj.stretchx1 = "0";
	sliceObj.stretchy1 = "0";
	
	// down
	sliceObj.name2 = "";
	sliceObj.filename2 = "";
	sliceObj.color2 = "#808080";
	sliceObj.px2 = 0;
	sliceObj.py2 = 0;
	sliceObj.pwidth2 = defaultWidth;
	sliceObj.pheight2 = defaultHeight;
	sliceObj.rotate2 = 0;
	sliceObj.stretchx2 = "0";
	sliceObj.stretchy2 = "0";
	
	// over down
	sliceObj.name3 = "";
	sliceObj.filename3 = "";
	sliceObj.color3 = "#808080";
	sliceObj.px3 = 0;
	sliceObj.py3 = 0;
	sliceObj.pwidth3 = defaultWidth;
	sliceObj.pheight3 = defaultHeight;
	sliceObj.rotate3 = 0;
	sliceObj.stretchx3 = "0";
	sliceObj.stretchy3 = "0";
	
	elem.customData.sliceObj = sliceObj;
}
DrawElem = function(elem){
	var sliceObj = elem.customData.sliceObj;
	var st = GetCurrentStateNum();
	if (!elem.contours[0].nodes.length){
		// use offset values in relation to relavant cp if no nodes yet drawn for path
		var reg = AddPoints( PointRound(cps[sliceObj.index]), {x:-sliceObj.x, y:-sliceObj.y} );
	}else{
		var reg = PointRound(elem.contours[0].nodes[0]);
	}
	DrawRect(elem, reg, AddPoints(reg, {x:sliceObj.width, y:sliceObj.height}));
	var attrs = elem.pathAttributes;
	attrs.brush = null;
	if (!sliceObj["color"+st]){
		attrs.fill = null;
		attrs.fillColor = "#FFFFFF";
	}else{
		attrs.fill = new Fill();
		attrs.fillColor = sliceObj["color"+st];
		if (sliceObj["name"+st]){
			attrs.fill.pattern = {
				image: null,
				name: sliceObj["name"+st]
			}
			UpdatePatternHandles(elem);
		}
		attrs.fill.edgeType = "hard";
	}
}
DrawRect = function(elem, p1, p2){
	var path = elem.contours[0];
	if (path.nodes.length != 4) path.nodes.length = 4;
	SetNodePosition(path.nodes[0], p1);
	SetNodePosition(path.nodes[1], {x:p2.x, y:p1.y});
	SetNodePosition(path.nodes[2], p2);
	SetNodePosition(path.nodes[3], {x:p1.x, y:p2.y});
	path.isClosed = true;
}
CopyStates = function(fromNum, toNum){
	var elems = smartShape.elem.elements;
	var props = ["name", "filename", "color", "px", "py", "pwidth", "pheight", "rotate", "stretchx", "stretchy"];
	var p;
	// 1-9 slice elements
	for (var i=1; i<=9; i++){
		for (p in props){
			elems[i].customData.sliceObj[ props[p]+toNum ] = elems[i].customData.sliceObj[ props[p]+fromNum ];
		}
	}
}

/* ****************************************
ToolTips
**************************************** */
RestoreToolTips = function(){
	cps[q1].toolTip = "Top-Left";
	cps[q2].toolTip = "Top-Center";
	cps[q3].toolTip = "Top-Right";
	cps[q4].toolTip = "Middle-Left";
	cps[q5].toolTip = "Middle-Center";
	cps[q6].toolTip = "Middle-Right";
	cps[q7].toolTip = "Bottom-Left";
	cps[q8].toolTip = "Bottom-Center";
	cps[q9].toolTip = "Bottom-Right";
}
UpdateToolTips = function(){
	var cp = smartShape.currentControlPoint;
	if (cp.toolTipTracksDrag){
		var elems = smartShape.elem.elements;
		var w = RoundBy(elems[q3].contours[0].nodes[1].x - elems[q1].contours[0].nodes[0].x, 2);
		var h = RoundBy(elems[q7].contours[0].nodes[3].y - elems[q1].contours[0].nodes[0].y, 2);
		cp.toolTip = "W: "+w+"px, H: "+h+"px";
	}
}
/* ****************************************
BASIC OPERATIONS
**************************************** */
RoundBy = function(n, by){
	by = Math.pow(10,by);
	return Math.round(n*by)/by;
}
SetNodePosition = function(node, pt){
	SetBezierNodePosition(node, pt,pt,pt);
}
SetBezierNodePosition = function(node, ptp, pt, pts){
	node.predX	= ptp.x;	node.predY	= ptp.y; 
	node.x		= pt.x;	node.y		= pt.y; 
	node.succX	= pts.x;	node.succY	= pts.y;
}
SetControlPoint = function(cpnum, pt, name, toolTip, toolTipTracksDrag){
	cps[cpnum] = new ControlPoint();
	var cp = cps[cpnum];
	cp.x = pt.x;
	cp.y = pt.y;
	cp.name = name;
	cp.toolTip = toolTip;
	cp.toolTipTracksDrag = toolTipTracksDrag;
}
SetHiddenControlPoint = function(cpnum, pt, name){
	cps[cpnum] = new ControlPoint();
	var cp = cps[cpnum];
	cp.x = pt.x;
	cp.y = pt.y;
	cp.name = name;
	cp.visible = false;
}
PointFromObj = function(o){
	return {x:o.x, y:o.y};
}
PointAverage = function(p1, p2){
	return {x:(p1.x + p2.x)/2, y:(p1.y + p2.y)/2};
}
PointDistance = function(p1, p2){
	var dx = p2.x - p1.x;
	var dy = p2.y - p1.y;
	return Math.sqrt(dx*dx + dy*dy);
}
PointRound = function(pt){
	return {x:Math.round(pt.x), y:Math.round(pt.y)};
}
AddPoints = function(pt1, pt2){
	return {x:pt1.x + pt2.x, y:pt1.y + pt2.y};
}
RotatePointAroundPoint = function(pt, origin, angle){
	var ca = Math.cos(angle),	sa = Math.sin(angle);
	var dx = pt.x - origin.x,	dy = pt.y - origin.y;
	return {x:origin.x + dx*ca - dy*sa, y:origin.y + dx*sa + dy*ca};
}
MultiplyPoints = function(pt1, pt2){
	return {x:pt1.x * pt2.x, y:pt1.y * pt2.y};
}
CopyProperties = function(from, to){
	for (var p in from) to[p] = from[p];
}
CopyPropertiesByState = function(from, to, state){
	for (var p in from){
		switch(p){
			case "width":
			case "height":
				to[p] = from[p];
				break;
			case "name":
				to[p+state] = unescape(from[p]);
				break;
			default:
				to[p+state] = from[p];
		}
	}
}
ObjectCopy = function(obj){
	var o;
	eval("o = "+obj.toSource());
	return o;
}

if (operation[smartShape.operation]) operation[smartShape.operation]();
if (debug) alert(debug);