
var autoshapename = "Scale-9 Component";
var version = "0.6.2";

var defaultHeight = 20;
var defaultWidth = 20;
var cpOffsetX = -7;
var cpOffsetY = -7;

var defaultText = "Sample";
var quadScript = fw.appDir +"/Configuration/Shared/senocular/ComponentShapes/Define%20Quadrant.swf";
var optionsScript = fw.appDir +"/Configuration/Shared/senocular/ComponentShapes/Options-9.swf";

var mouse = smartShape.currentMousePos;
mouse.x = Math.round(mouse.x);
mouse.y = Math.round(mouse.y);
var cps = smartShape.elem.controlPoints;
var debug = "";

/* ****************************************
SMARTSHAPE EVENTS
**************************************** */
operation = new Object();
operation.InsertSmartShapeAt = function(){
	
	smartShape.elem.elements[0] = new Group();
	smartShape.elem.elements[0].elements[0] = new Group(); // reserved for text if added
	var opt = smartShape.elem.elements[0]
	opt.customData.optionsObj = new Object();
	opt.customData.optionsObj.usetext = "0"; // 0 = false, 1 = true 
	opt.customData.optionsObj.version = version;
	opt.customData.optionsObj.autoshapename = autoshapename;
	
	SetControlPoint(0, AddPoints(mouse, {x:cpOffsetX-defaultWidth/2, y:cpOffsetY-defaultHeight/2}), "Options", "Options");
	cps[0].type = "defaultInverted";
	
	CreateShape(1, "Top-Left");
	CreateShape(2, "Top-Center");
	CreateShape(3, "Top-Right");
	CreateShape(4, "Middle-Left");
	CreateShape(5, "Middle-Center");
	CreateShape(6, "Middle-Right");
	CreateShape(7, "Bottom-Left");
	CreateShape(8, "Bottom-Center");
	CreateShape(9, "Bottom-Right");
	
	RedrawShape();
	
}
CreateShape = function(num, toolTip){
	smartShape.elem.elements[num] = new Path();
	elem = smartShape.elem.elements[num];
	DefineQuadrantObj(elem, defaultWidth/2, defaultHeight/2, num);
	SetControlPoint(num, mouse, "quad"+num, toolTip + "; CTRL+Click to Edit");
	DrawElem(elem);
}
operation.BeginDragControlPoint = function(){
	AsureUniqueCustomData();
	var cp = smartShape.currentControlPoint;
	
	if (cp.name == "Options"){
		if (smartShape.ctrlCmdKeyDown){
			RedrawShape();
			return;
		}
		MMNotes.ComponentAutoShapeChannel = SerializeOptionsObj();
		if ( RunFlashScript(optionsScript, false) ) RedrawShape();
		return;
	}
	
	if (smartShape.ctrlCmdKeyDown){
		var elem = smartShape.elem.elements[cp.index];
		MMNotes.ComponentAutoShapeChannel = SerializeQuadrantObj( elem.customData.quadrantObj );
		if ( RunFlashScript(quadScript, smartShape.shiftKeyDown) ) RedrawShape();
		return;
	}
	
	UpdateTextLocation();
	
	var elems = smartShape.elem.elements;
	var parms = smartShape.GetDefaultMoveParms();
	parms.minMaxRelative = true;
	
	var hmin, vmin, hmax, vmax, right, left, top, bottom;
	right = elems[3].contours[0].nodes[0].x;
	bottom = elems[7].contours[0].nodes[0].y;
	hmax = right - elems[1].contours[0].nodes[1].x;
	hmax = Math.min(hmax, right - elems[4].contours[0].nodes[1].x);
	hmax = Math.min(hmax, right - elems[7].contours[0].nodes[1].x);
	
	vmax = bottom - elems[1].contours[0].nodes[3].y;
	vmax = Math.min(vmax, bottom - elems[2].contours[0].nodes[3].y);
	vmax = Math.min(vmax, bottom - elems[3].contours[0].nodes[3].y);

	switch(cp.name){
		case "quad1":
			parms.maxX = hmax;
			parms.maxY = vmax;
			cps[0].RegisterMove(parms); // options
			
			RegisterMoveRect(elems[1], parms);
			cp.RegisterMove(parms);
			
			elems[2].contours[0].nodes[0].RegisterMove(parms);
			elems[2].contours[0].nodes[3].RegisterMove(parms);
			
			elems[4].contours[0].nodes[0].RegisterMove(parms);
			elems[4].contours[0].nodes[1].RegisterMove(parms);
			
			elems[5].contours[0].nodes[0].RegisterMove(parms);
			
			parms.deltaXtoX = 0;
			RegisterMoveRect(elems[3], parms);
			cps[3].RegisterMove(parms);
			
			elems[2].contours[0].nodes[1].RegisterMove(parms);
			elems[2].contours[0].nodes[2].RegisterMove(parms);
			
			elems[6].contours[0].nodes[0].RegisterMove(parms);
			elems[6].contours[0].nodes[1].RegisterMove(parms);
			
			elems[5].contours[0].nodes[1].RegisterMove(parms);
			
			parms.deltaXtoX = 1;
			parms.deltaYtoY = 0;
			RegisterMoveRect(elems[7], parms);
			cps[7].RegisterMove(parms);
			
			elems[4].contours[0].nodes[2].RegisterMove(parms);
			elems[4].contours[0].nodes[3].RegisterMove(parms);
			
			elems[8].contours[0].nodes[0].RegisterMove(parms);
			elems[8].contours[0].nodes[3].RegisterMove(parms);
			
			elems[5].contours[0].nodes[3].RegisterMove(parms);
			
			// halfs
			parms.maxX = hmax;
			parms.maxY = vmax/2;
			parms.deltaXtoX = 0;
			parms.deltaYtoY = .5;
			cps[6].RegisterMove(parms);
			
			parms.deltaXtoX = 1;
			parms.deltaYtoY = .5;
			cps[4].RegisterMove(parms);

			parms.maxX = hmax/2;
			parms.maxY = vmax;
			parms.deltaXtoX = .5;
			parms.deltaYtoY = 1;
			cps[2].RegisterMove(parms);
			
			parms.deltaXtoX = .5;
			parms.deltaYtoY = 0;
			cps[8].RegisterMove(parms);
			
			parms.maxX = hmax/2;
			parms.maxY = vmax/2;
			parms.deltaXtoX = .5;
			parms.deltaYtoY = .5;
			cps[5].RegisterMove(parms);
			break;
			
		case "quad3":
			hmax = -hmax;
			parms.minX = hmax;
			parms.maxY = vmax;
			RegisterMoveRect(elems[3], parms);
			cp.RegisterMove(parms);
			
			elems[2].contours[0].nodes[1].RegisterMove(parms);
			elems[2].contours[0].nodes[2].RegisterMove(parms);
			
			elems[6].contours[0].nodes[0].RegisterMove(parms);
			elems[6].contours[0].nodes[1].RegisterMove(parms);
			
			elems[5].contours[0].nodes[1].RegisterMove(parms);
			
			parms.deltaXtoX = 0;
			cps[0].RegisterMove(parms); // options
			
			RegisterMoveRect(elems[1], parms);
			cps[1].RegisterMove(parms);
			
			elems[2].contours[0].nodes[0].RegisterMove(parms);
			elems[2].contours[0].nodes[3].RegisterMove(parms);
			
			elems[4].contours[0].nodes[0].RegisterMove(parms);
			elems[4].contours[0].nodes[1].RegisterMove(parms);
			
			elems[5].contours[0].nodes[0].RegisterMove(parms);
			
			parms.deltaXtoX = 1;
			parms.deltaYtoY = 0;
			RegisterMoveRect(elems[9], parms);
			cps[9].RegisterMove(parms);
			
			elems[6].contours[0].nodes[2].RegisterMove(parms);
			elems[6].contours[0].nodes[3].RegisterMove(parms);
			
			elems[8].contours[0].nodes[1].RegisterMove(parms);
			elems[8].contours[0].nodes[2].RegisterMove(parms);
			
			elems[5].contours[0].nodes[2].RegisterMove(parms);
			
			// halfs
			parms.minX = hmax;
			parms.maxY = vmax/2;
			parms.deltaXtoX = 0;
			parms.deltaYtoY = .5;
			cps[4].RegisterMove(parms);
			
			parms.deltaXtoX = 1;
			parms.deltaYtoY = .5;
			cps[6].RegisterMove(parms);

			parms.minX = hmax/2;
			parms.maxY = vmax;
			parms.deltaXtoX = .5;
			parms.deltaYtoY = 1;
			cps[2].RegisterMove(parms);
			
			parms.deltaXtoX = .5;
			parms.deltaYtoY = 0;
			cps[8].RegisterMove(parms);
			
			parms.minX = hmax/2;
			parms.maxY = vmax/2;
			parms.deltaXtoX = .5;
			parms.deltaYtoY = .5;
			cps[5].RegisterMove(parms);
			break;
			
		case "quad7":
			vmax = -vmax
			parms.maxX = hmax;
			parms.minY = vmax;
			RegisterMoveRect(elems[7], parms);
			cp.RegisterMove(parms);
			
			elems[8].contours[0].nodes[0].RegisterMove(parms);
			elems[8].contours[0].nodes[3].RegisterMove(parms);
			
			elems[4].contours[0].nodes[2].RegisterMove(parms);
			elems[4].contours[0].nodes[3].RegisterMove(parms);
			
			elems[5].contours[0].nodes[3].RegisterMove(parms);
			
			parms.deltaXtoX = 0;
			RegisterMoveRect(elems[9], parms);
			cps[9].RegisterMove(parms);
			
			elems[6].contours[0].nodes[2].RegisterMove(parms);
			elems[6].contours[0].nodes[3].RegisterMove(parms);
			
			elems[8].contours[0].nodes[1].RegisterMove(parms);
			elems[8].contours[0].nodes[2].RegisterMove(parms);
			
			elems[5].contours[0].nodes[2].RegisterMove(parms);
			
			parms.deltaXtoX = 1;
			parms.deltaYtoY = 0;
			cps[0].RegisterMove(parms); // options
			
			RegisterMoveRect(elems[1], parms);
			cps[1].RegisterMove(parms);
			
			elems[4].contours[0].nodes[0].RegisterMove(parms);
			elems[4].contours[0].nodes[1].RegisterMove(parms);
			
			elems[2].contours[0].nodes[0].RegisterMove(parms);
			elems[2].contours[0].nodes[3].RegisterMove(parms);
			
			elems[5].contours[0].nodes[0].RegisterMove(parms);
			
			// halfs
			parms.maxX = hmax;
			parms.minY = vmax/2;
			parms.deltaXtoX = 0;
			parms.deltaYtoY = .5;
			cps[6].RegisterMove(parms);
			
			parms.deltaXtoX = 1;
			parms.deltaYtoY = .5;
			cps[4].RegisterMove(parms);

			parms.maxX = hmax/2;
			parms.minY = vmax;
			parms.deltaXtoX = .5;
			parms.deltaYtoY = 1;
			cps[8].RegisterMove(parms);
			
			parms.deltaXtoX = .5;
			parms.deltaYtoY = 0;
			cps[2].RegisterMove(parms);
			
			parms.maxX = hmax/2;
			parms.minY = vmax/2;
			parms.deltaXtoX = .5;
			parms.deltaYtoY = .5;
			cps[5].RegisterMove(parms);
			break;
			
		case "quad9":
			hmax = -hmax;
			vmax = -vmax;
			parms.minX = hmax;
			parms.minY = vmax;
			RegisterMoveRect(elems[9], parms);
			cp.RegisterMove(parms);
			
			elems[8].contours[0].nodes[1].RegisterMove(parms);
			elems[8].contours[0].nodes[2].RegisterMove(parms);
			
			elems[6].contours[0].nodes[2].RegisterMove(parms);
			elems[6].contours[0].nodes[3].RegisterMove(parms);
			
			elems[5].contours[0].nodes[2].RegisterMove(parms);
			
			parms.deltaXtoX = 0;
			RegisterMoveRect(elems[7], parms);
			cps[7].RegisterMove(parms);
			
			elems[8].contours[0].nodes[0].RegisterMove(parms);
			elems[8].contours[0].nodes[3].RegisterMove(parms);
			
			elems[4].contours[0].nodes[2].RegisterMove(parms);
			elems[4].contours[0].nodes[3].RegisterMove(parms);
			
			elems[5].contours[0].nodes[3].RegisterMove(parms);
			
			parms.deltaXtoX = 1;
			parms.deltaYtoY = 0;
			RegisterMoveRect(elems[3], parms);
			cps[3].RegisterMove(parms);
			
			elems[2].contours[0].nodes[1].RegisterMove(parms);
			elems[2].contours[0].nodes[2].RegisterMove(parms);
			
			elems[6].contours[0].nodes[0].RegisterMove(parms);
			elems[6].contours[0].nodes[1].RegisterMove(parms);
			
			elems[5].contours[0].nodes[1].RegisterMove(parms);
			
			// halfs
			parms.minX = hmax;
			parms.minY = vmax/2;
			parms.deltaXtoX = 0;
			parms.deltaYtoY = .5;
			cps[4].RegisterMove(parms);
			
			parms.deltaXtoX = 1;
			parms.deltaYtoY = .5;
			cps[6].RegisterMove(parms);

			parms.minX = hmax/2;
			parms.minY = vmax;
			parms.deltaXtoX = .5;
			parms.deltaYtoY = 1;
			cps[8].RegisterMove(parms);
			
			parms.deltaXtoX = .5;
			parms.deltaYtoY = 0;
			cps[2].RegisterMove(parms);
			
			parms.minX = hmax/2;
			parms.minY = vmax/2;
			parms.deltaXtoX = .5;
			parms.deltaYtoY = .5;
			cps[5].RegisterMove(parms);
			break;
			
		case "quad2":
			parms.maxY = vmax;
			parms.deltaXtoX = 0;
			cps[0].RegisterMove(parms); // options
			
			RegisterMoveRect(elems[1], parms);
			cps[1].RegisterMove(parms);
			RegisterMoveRect(elems[2], parms);
			cp.RegisterMove(parms);
			RegisterMoveRect(elems[3], parms);
			cps[3].RegisterMove(parms);
			
			elems[4].contours[0].nodes[0].RegisterMove(parms);
			elems[4].contours[0].nodes[1].RegisterMove(parms);
			elems[5].contours[0].nodes[0].RegisterMove(parms);
			elems[5].contours[0].nodes[1].RegisterMove(parms);
			elems[6].contours[0].nodes[0].RegisterMove(parms);
			elems[6].contours[0].nodes[1].RegisterMove(parms);
			
			parms.deltaYtoY = .5;
			parms.maxY = vmax/2;
			cps[4].RegisterMove(parms);
			cps[5].RegisterMove(parms);
			cps[6].RegisterMove(parms);
			break;
			
		case "quad4":
			parms.maxX = hmax;
			parms.deltaYtoY = 0;
			cps[0].RegisterMove(parms); // options
			
			RegisterMoveRect(elems[1], parms);
			cps[1].RegisterMove(parms);
			RegisterMoveRect(elems[4], parms);
			cp.RegisterMove(parms);
			RegisterMoveRect(elems[7], parms);
			cps[7].RegisterMove(parms);
			
			elems[2].contours[0].nodes[0].RegisterMove(parms);
			elems[2].contours[0].nodes[3].RegisterMove(parms);
			elems[5].contours[0].nodes[0].RegisterMove(parms);
			elems[5].contours[0].nodes[3].RegisterMove(parms);
			elems[8].contours[0].nodes[0].RegisterMove(parms);
			elems[8].contours[0].nodes[3].RegisterMove(parms);
			
			parms.deltaXtoX = .5;
			parms.maxX = hmax/2;
			cps[2].RegisterMove(parms);
			cps[5].RegisterMove(parms);
			cps[8].RegisterMove(parms);
			break;
			
		case "quad6":
			hmax = -hmax;
			parms.minX = hmax;
			parms.deltaYtoY = 0;
			
			RegisterMoveRect(elems[3], parms);
			cps[3].RegisterMove(parms);
			RegisterMoveRect(elems[6], parms);
			cp.RegisterMove(parms);
			RegisterMoveRect(elems[9], parms);
			cps[9].RegisterMove(parms);
			
			elems[2].contours[0].nodes[1].RegisterMove(parms);
			elems[2].contours[0].nodes[2].RegisterMove(parms);
			elems[5].contours[0].nodes[1].RegisterMove(parms);
			elems[5].contours[0].nodes[2].RegisterMove(parms);
			elems[8].contours[0].nodes[1].RegisterMove(parms);
			elems[8].contours[0].nodes[2].RegisterMove(parms);
			
			parms.deltaXtoX = .5;
			parms.minX = hmax/2;
			cps[2].RegisterMove(parms);
			cps[5].RegisterMove(parms);
			cps[8].RegisterMove(parms);			
			break;
			
		case "quad8":
			vmax = -vmax;
			parms.minY = vmax;
			parms.deltaXtoX = 0;
			
			RegisterMoveRect(elems[7], parms);
			cps[7].RegisterMove(parms);
			RegisterMoveRect(elems[8], parms);
			cp.RegisterMove(parms);
			RegisterMoveRect(elems[9], parms);
			cps[9].RegisterMove(parms);
			
			elems[4].contours[0].nodes[2].RegisterMove(parms);
			elems[4].contours[0].nodes[3].RegisterMove(parms);
			elems[5].contours[0].nodes[2].RegisterMove(parms);
			elems[5].contours[0].nodes[3].RegisterMove(parms);
			elems[6].contours[0].nodes[2].RegisterMove(parms);
			elems[6].contours[0].nodes[3].RegisterMove(parms);
			
			parms.deltaYtoY = .5;
			parms.minY = vmax/2;
			cps[4].RegisterMove(parms);
			cps[5].RegisterMove(parms);
			cps[6].RegisterMove(parms);
			break;
	}
}

operation.EndDragControlPoint = function(){
	UpdateAllPatternHandles();
	UpdateControlPoints();
	UpdateText();
}

/* ****************************************
INTERACTING
**************************************** */
RegisterMoveRect = function(elem, parms){
	var nods = elem.contours[0].nodes;
	nods[0].RegisterMove( parms );
	nods[1].RegisterMove( parms );
	nods[2].RegisterMove( parms );
	nods[3].RegisterMove( parms );
}
RunFlashScript = function(script, applyAll){
	if (Files.exists(script)){
		fw.runScript(script);
		return UpdateFromFlash(script, applyAll);
	}
	alert("Error: Unable to locate dialog.\nMake sure you have the Scale-9 Auto Shape installed.");
	return false;
}
SerializeQuadrantObj = function(quadrantObj){
	var str = "";
	str += escape(quadrantObj.name);
	str += "," + quadrantObj.filename;
	str += "," + quadrantObj.color;
	str += "," + quadrantObj.px;
	str += "," + quadrantObj.py;
	str += "," + quadrantObj.width;
	str += "," + quadrantObj.height;
	str += "," + quadrantObj.pwidth;
	str += "," + quadrantObj.pheight;
	str += "," + quadrantObj.rotate;
	return str;
}
SerializeOptionsObj = function(){
	var opt = smartShape.elem.elements[0];
	var str = "";
	str += opt.customData.optionsObj.version;
	str += "," + opt.customData.optionsObj.usetext;
	return str;
}
AsureUniqueCustomData = function(){
	var elems = smartShape.elem.elements;
	elems[0].customData.optionsObj = ObjectCopy(elems[0].customData.optionsObj);
	elems[1].customData.quadrantObj = ObjectCopy(elems[1].customData.quadrantObj);
	elems[2].customData.quadrantObj = ObjectCopy(elems[2].customData.quadrantObj);
	elems[3].customData.quadrantObj = ObjectCopy(elems[3].customData.quadrantObj);
	elems[4].customData.quadrantObj = ObjectCopy(elems[4].customData.quadrantObj);
	elems[5].customData.quadrantObj = ObjectCopy(elems[5].customData.quadrantObj);
	elems[6].customData.quadrantObj = ObjectCopy(elems[6].customData.quadrantObj);
	elems[7].customData.quadrantObj = ObjectCopy(elems[7].customData.quadrantObj);
	elems[8].customData.quadrantObj = ObjectCopy(elems[8].customData.quadrantObj);
	elems[9].customData.quadrantObj = ObjectCopy(elems[9].customData.quadrantObj);
}

/* ****************************************
UPDATING
**************************************** */
UpdatePatternHandles = function(elem){
	var attrs = elem.pathAttributes;
	if (!attrs.fill) return;
	if (!attrs.fill.pattern) return;
	var quadrantObj = elem.customData.quadrantObj;
	var reg = PointFromObj(elem.contours[0].nodes[0]);
	attrs.fillHandle1 = AddPoints(reg, {x:quadrantObj.px, y:quadrantObj.py});
	
	var pt2 = {x:quadrantObj.pwidth, y:0};
	var pt3 = {x:0, y:-quadrantObj.pheight};
	pt2 = RotatePointAroundPoint(pt2, {x:0, y:0}, quadrantObj.rotate* Math.PI/180);
	pt3 = RotatePointAroundPoint(pt3, {x:0, y:0}, quadrantObj.rotate* Math.PI/180);

	attrs.fillHandle2 = AddPoints(attrs.fillHandle1, pt2);
	attrs.fillHandle3 = AddPoints(attrs.fillHandle1, pt3);
}
UpdateAllPatternHandles = function(){	
	for (var i=1; i<=9; i++) UpdatePatternHandles(smartShape.elem.elements[i]);
}
UpdateControlPoints = function(){
	for (var i=1; i<=9; i++) CenterControlPoint(i, smartShape.elem.elements[i]);
}
UpdateFromFlash = function( whichScript, applyAll ){
	if (!MMNotes.ComponentAutoShapeChannel) return false;
	
	var opt = smartShape.elem.elements[0];
	switch(whichScript){
		case quadScript:
			var cp = smartShape.currentControlPoint;
			if (applyAll && fw.yesNoDialog("Are you sure you want to apply these settings to all quadrants?")){
				var elems = [
					smartShape.elem.elements[1],
					smartShape.elem.elements[2],
					smartShape.elem.elements[3],
					smartShape.elem.elements[4],
					smartShape.elem.elements[5],
					smartShape.elem.elements[6],
					smartShape.elem.elements[7],
					smartShape.elem.elements[8],
					smartShape.elem.elements[9]
				];
			}else{
				var elems = [ smartShape.elem.elements[cp.index] ];
			}
			var i = elems.length;
			while(i--){
				CopyProperties(MMNotes.ComponentAutoShapeChannel, elems[i].customData.quadrantObj);
				if (MMNotes.ComponentAutoShapeChannel.name){
					elems[i].customData.quadrantObj.name = unescape(elems[i].customData.quadrantObj.name);
				}
			}
			break;
	
		case optionsScript:
			CopyProperties(MMNotes.ComponentAutoShapeChannel, opt.customData.optionsObj);
			break;
	}
	
	// for all scripts
	delete MMNotes.ComponentAutoShapeChannel;
	return true;
}
CenterControlPoint = function(cpNum, elem){
	var cp = cps[cpNum];
	var nods = elem.contours[0].nodes;
	var loc = PointAverage(nods[0], nods[2]);
	cp.x = loc.x;
	cp.y = loc.y;
}
UpdateText = function(){
	var i = smartShape.elem.elements[0].elements.length;
	var elems = smartShape.elem.elements;
	var left = elems[1].contours[0].nodes[0].x;
	var right = elems[3].contours[0].nodes[1].x;
	right = Math.max(right, elems[6].contours[0].nodes[1].x);
	right = Math.max(right, elems[9].contours[0].nodes[1].x);
	var elem;
	while (i--){
		elem = smartShape.elem.elements[0].elements[i];
		if (elem.customData.padding){
			elem.rawTop = elems[1].contours[0].nodes[0].y + elem.customData.padding.top;
			switch(elem.textRuns.initialAttrs.alignment){
				case "center":
					elem.rawLeft = left + ((right-left)/2) - (elem.rawWidth/2);
					break;
				case "right":
					elem.rawLeft = right - (elem.rawWidth + elem.customData.padding.right);
					break;
				default:
					elem.rawLeft = left + elem.customData.padding.left;
			}
		}
	}
}
UpdateTextLocation = function(){
	var i = smartShape.elem.elements[0].elements.length;
	var elems = smartShape.elem.elements;
	var left = elems[1].contours[0].nodes[0].x;
	var right = elems[3].contours[0].nodes[1].x;
	right = Math.max(right, elems[6].contours[0].nodes[1].x);
	right = Math.max(right, elems[9].contours[0].nodes[1].x);
	var elem;
	while (i--){
		elem = smartShape.elem.elements[0].elements[i];
		elem.customData.padding = {
			top:elem.rawTop - elems[1].contours[0].nodes[0].y,
			left:elem.rawLeft - left,
			right:right - (elem.rawLeft + elem.rawWidth),
		}
	}
}
AddText = function(newText){
	if (newText){
		if (smartShape.elem.elements[0].elements.length) return;
		smartShape.elem.elements[0].elements[0] = new Text();
		var elem = smartShape.elem.elements[0].elements[0];
		elem.antiAliased = false;
		elem.autoExpand = true;
		elem.autoKern = false;
		elem.orientation = "horizontal left to right";
		elem.rawLeft = 3 + cps[0].x-cpOffsetX;
		elem.rawTop = 3 + cps[0].y-cpOffsetY;
		var pathattrs = { fill:{ category:"fc_Solid", ditherColors:[ "#000000", "#000000" ], edgeType:"hard", feather:0, gradient:null, name:"fn_Normal", pattern:null, shape:"solid", stampingMode:"blend opaque", textureBlend:0, webDitherTransparent:false }, fillColor:"#000000", fillHandle1:{ x:49, y:122 }, fillHandle2:{ x:98, y:122 }, fillHandle3:{ x:49, y:106 }, fillOnTop:false, fillTexture:null };
		CopyProperties(pathattrs, elem.pathAttributes);
		elem.textRuns = { initialAttrs:{ alignment:"left", antiAliasSharpness:192, antiAliasStrength:64, baselineShift:0, bold:false, face:"Arial", fillColor:"#000000", horizontalScale:1, italic:false, leading:1, leadingMode:"percentage", overSample:8, paragraphIndent:0, paragraphSpacingAfter:0, paragraphSpacingBefore:0, rangeKerning:0, size:"12pt", underline:false }, textRuns:[ { changedAttrs:{  }, characters:"Sample" } ] };
		UpdateTextLocation();
	}else{
		smartShape.elem.elements[0].elements.length = 0;
	}
}

/* ****************************************
DEFINING
**************************************** */
DefineQuadrantObj = function(elem, offx, offy, index){
	var quadrantObj = new Object();
	quadrantObj.name = "";
	quadrantObj.filename = "";
	quadrantObj.color = "#808080";
	quadrantObj.width = defaultWidth;
	quadrantObj.height = defaultHeight;
	quadrantObj.px = 0;
	quadrantObj.py = 0;
	quadrantObj.pwidth = defaultWidth;
	quadrantObj.pheight = defaultHeight;
	quadrantObj.rotate = 0;
	// not sent to flash
	quadrantObj.x = offx;
	quadrantObj.y = offy;
	quadrantObj.index = index;
	elem.customData.quadrantObj = quadrantObj;
}
DrawElem = function(elem){
	var quadrantObj = elem.customData.quadrantObj;
	if (!elem.contours[0].nodes.length){
		// use offset values in relation to relavant cp if no nodes yet drawn for path
		var reg = AddPoints( PointFromObj(cps[quadrantObj.index]), {x:-quadrantObj.x, y:-quadrantObj.y} );
	}else{
		var reg = PointFromObj(elem.contours[0].nodes[0]);
	}
	DrawRect(elem, reg, AddPoints(reg, {x:quadrantObj.width, y:quadrantObj.height}));
	var attrs = elem.pathAttributes;
	attrs.brush = null;
	if (!quadrantObj.color){
		attrs.fill = null;
		attrs.fillColor = "#FFFFFF";
	}else{
		attrs.fill = new Fill();
		attrs.fillColor = quadrantObj.color;
		if (quadrantObj.name){
			attrs.fill.pattern = {
				image: null,
				name: quadrantObj.name
			}
			UpdatePatternHandles(elem);
		}
	}
}
DrawRect = function(elem, p1, p2){
	var path = elem.contours[0];
	if (path.nodes.length != 4) path.nodes.length = 4;
	SetNodePosition(path.nodes[0], p1);
	SetNodePosition(path.nodes[1], {x:p2.x, y:p1.y});
	SetNodePosition(path.nodes[2], p2);
	SetNodePosition(path.nodes[3], {x:p1.x, y:p2.y});
	path.isClosed = true;
}
RedrawShape = function(){
	// assume all elements have been drawn
	var reg = AddPoints(cps[0], {x:-cpOffsetX, y:-cpOffsetY});
	var offset;
	var elems = smartShape.elem.elements;
	
	// top left (init ref)
	// q1
	SetNodePosition(elems[1].contours[0].nodes[0], reg);
	DrawElem(elems[1]);
	
	var hloc = elems[4].customData.quadrantObj.width;
	hloc = Math.max(hloc, elems[1].customData.quadrantObj.width + (elems[2].contours[0].nodes[1].x - elems[2].contours[0].nodes[0].x));
	hloc = Math.max(hloc, elems[7].customData.quadrantObj.width + (elems[8].contours[0].nodes[1].x - elems[8].contours[0].nodes[0].x));
	hloc += cps[0].x - cpOffsetX;
	//~ alert([cps[0].x, hloc].toSource());
	
	var vloc = elems[2].customData.quadrantObj.height;
	vloc = Math.max(vloc, elems[1].customData.quadrantObj.height + (elems[4].contours[0].nodes[3].y - elems[4].contours[0].nodes[0].y));
	vloc = Math.max(vloc, elems[3].customData.quadrantObj.height + (elems[6].contours[0].nodes[3].y - elems[6].contours[0].nodes[0].y));
	vloc += cps[0].y - cpOffsetY;
	
	// remaining top row
	// q2
	SetNodePosition(elems[2].contours[0].nodes[0], elems[1].contours[0].nodes[1]);
	DrawElem(elems[2]);
	SetNodePosition(elems[2].contours[0].nodes[2], {x:hloc, y:elems[2].contours[0].nodes[2].y});
	SetNodePosition(elems[2].contours[0].nodes[1], {x:hloc, y:elems[2].contours[0].nodes[1].y});
	// q3
	SetNodePosition(elems[3].contours[0].nodes[0], elems[2].contours[0].nodes[1]);
	DrawElem(elems[3]);
	
	// middle row
	// q4
	SetNodePosition(elems[4].contours[0].nodes[0], elems[1].contours[0].nodes[3]);
	DrawElem(elems[4]);
	SetNodePosition(elems[4].contours[0].nodes[2], {x:elems[4].contours[0].nodes[2].x, y:vloc});
	SetNodePosition(elems[4].contours[0].nodes[3], {x:elems[4].contours[0].nodes[3].x, y:vloc});
	// q5 last	
	// q6
	SetNodePosition(elems[6].contours[0].nodes[0], elems[3].contours[0].nodes[3]);
	DrawElem(elems[6]);
	SetNodePosition(elems[6].contours[0].nodes[2], {x:elems[6].contours[0].nodes[2].x, y:vloc});
	SetNodePosition(elems[6].contours[0].nodes[3], {x:elems[6].contours[0].nodes[3].x, y:vloc});
	
	// bottom row
	// q7
	SetNodePosition(elems[7].contours[0].nodes[0], elems[4].contours[0].nodes[3]);
	DrawElem(elems[7]);
	// q8
	SetNodePosition(elems[8].contours[0].nodes[0], elems[7].contours[0].nodes[1]);
	DrawElem(elems[8]);
	SetNodePosition(elems[8].contours[0].nodes[1], {x:hloc, y:elems[8].contours[0].nodes[1].y});
	SetNodePosition(elems[8].contours[0].nodes[2], {x:hloc, y:elems[8].contours[0].nodes[2].y});
	// q9
	SetNodePosition(elems[9].contours[0].nodes[0], elems[6].contours[0].nodes[3]);
	DrawElem(elems[9]);
	
	// q5
	DrawElem(elems[5]);
	reg = {x:Math.min(elems[1].contours[0].nodes[1].x, elems[4].contours[0].nodes[1].x), y:Math.min(elems[1].contours[0].nodes[3].y, elems[2].contours[0].nodes[3].y)};
	SetNodePosition(elems[5].contours[0].nodes[0], reg);
	SetNodePosition(elems[5].contours[0].nodes[1], {x:elems[9].contours[0].nodes[0].x, y:reg.y});
	SetNodePosition(elems[5].contours[0].nodes[2], elems[9].contours[0].nodes[0]);
	SetNodePosition(elems[5].contours[0].nodes[3], {x:reg.x, y:elems[9].contours[0].nodes[0].y});
	
	UpdateControlPoints();
	AddText(smartShape.elem.elements[0].customData.optionsObj.usetext);
}

/* ****************************************
BASIC OPERATIONS
**************************************** */
SetNodePosition = function(node, pt){
	SetBezierNodePosition(node, pt,pt,pt);
}
SetBezierNodePosition = function(node, ptp, pt, pts){
	node.predX	= ptp.x;	node.predY	= ptp.y; 
	node.x		= pt.x;	node.y		= pt.y; 
	node.succX	= pts.x;	node.succY	= pts.y;
}
SetControlPoint = function(cpnum, pt, name, toolTip){
	cps[cpnum] = new ControlPoint();
	var cp = cps[cpnum];
	cp.x = pt.x;
	cp.y = pt.y;
	cp.name = name;
	cp.toolTip = toolTip;
}
SetHiddenControlPoint = function(cpnum, pt, name){
	cps[cpnum] = new ControlPoint();
	var cp = cps[cpnum];
	cp.x = pt.x;
	cp.y = pt.y;
	cp.name = name;
	cp.visible = false;
}
PointFromObj = function(o){
	return {x:o.x, y:o.y};
}
PointAverage = function(p1, p2){
	return {x:(p1.x + p2.x)/2, y:(p1.y + p2.y)/2};
}
AddPoints = function(pt1, pt2){
	return {x:pt1.x + pt2.x, y:pt1.y + pt2.y};
}
RotatePointAroundPoint = function(pt, origin, angle){
	var ca = Math.cos(angle),	sa = Math.sin(angle);
	var dx = pt.x - origin.x,	dy = pt.y - origin.y;
	return {x:origin.x + dx*ca - dy*sa, y:origin.y + dx*sa + dy*ca};
}
CopyProperties = function(from, to){
	for (var p in from) to[p] = from[p];
}
ObjectCopy = function(obj){
	var o;
	eval("o = "+obj.toSource());
	return o;
}

if (operation[smartShape.operation]) operation[smartShape.operation]();
if (debug) alert(debug);